/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WRAP_TOKEN_DISCRIMINATOR = new Uint8Array([
  203, 83, 204, 83, 225, 109, 44, 6,
]);

export function getWrapTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WRAP_TOKEN_DISCRIMINATOR);
}

export type WrapTokenInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountGasFeeReceiver extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountOutgoingMessage extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGasFeeReceiver extends string
        ? WritableAccount<TAccountGasFeeReceiver>
        : TAccountGasFeeReceiver,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountOutgoingMessage extends string
        ? WritableAccount<TAccountOutgoingMessage>
        : TAccountOutgoingMessage,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WrapTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  outgoingMessageSalt: ReadonlyUint8Array;
  decimals: number;
  /** The human-readable name of the token (e.g., "Wrapped Bitcoin") */
  name: string;
  /** The symbol/ticker of the token (e.g., "WBTC") */
  symbol: string;
  /**
   * The 20-byte address of the corresponding token contract on Base (EVM address bytes).
   * This allows the bridge to identify which Base token this Solana token represents.
   */
  remoteToken: ReadonlyUint8Array;
  /**
   * The scaling exponent used to convert between token amounts on different chains.
   * This handles cases where tokens have differing decimal precision on Base vs Solana.
   * For example, when Base token has 18 decimals and the Solana wrapped mint has 9,
   * this value conveys the decimal relationship so bridging logic can scale amounts.
   * The exact conversion is performed by the EVM-side contract; Solana propagates this
   * value but does not apply arithmetic with it.
   */
  scalerExponent: number;
};

export type WrapTokenInstructionDataArgs = {
  outgoingMessageSalt: ReadonlyUint8Array;
  decimals: number;
  /** The human-readable name of the token (e.g., "Wrapped Bitcoin") */
  name: string;
  /** The symbol/ticker of the token (e.g., "WBTC") */
  symbol: string;
  /**
   * The 20-byte address of the corresponding token contract on Base (EVM address bytes).
   * This allows the bridge to identify which Base token this Solana token represents.
   */
  remoteToken: ReadonlyUint8Array;
  /**
   * The scaling exponent used to convert between token amounts on different chains.
   * This handles cases where tokens have differing decimal precision on Base vs Solana.
   * For example, when Base token has 18 decimals and the Solana wrapped mint has 9,
   * this value conveys the decimal relationship so bridging logic can scale amounts.
   * The exact conversion is performed by the EVM-side contract; Solana propagates this
   * value but does not apply arithmetic with it.
   */
  scalerExponent: number;
};

export function getWrapTokenInstructionDataEncoder(): Encoder<WrapTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['outgoingMessageSalt', fixEncoderSize(getBytesEncoder(), 32)],
      ['decimals', getU8Encoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['remoteToken', fixEncoderSize(getBytesEncoder(), 20)],
      ['scalerExponent', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WRAP_TOKEN_DISCRIMINATOR })
  );
}

export function getWrapTokenInstructionDataDecoder(): Decoder<WrapTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['outgoingMessageSalt', fixDecoderSize(getBytesDecoder(), 32)],
    ['decimals', getU8Decoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['remoteToken', fixDecoderSize(getBytesDecoder(), 20)],
    ['scalerExponent', getU8Decoder()],
  ]);
}

export function getWrapTokenInstructionDataCodec(): Codec<
  WrapTokenInstructionDataArgs,
  WrapTokenInstructionData
> {
  return combineCodec(
    getWrapTokenInstructionDataEncoder(),
    getWrapTokenInstructionDataDecoder()
  );
}

export type WrapTokenInput<
  TAccountPayer extends string = string,
  TAccountGasFeeReceiver extends string = string,
  TAccountMint extends string = string,
  TAccountBridge extends string = string,
  TAccountOutgoingMessage extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for the transaction and all account creation costs.
   * Must be mutable to deduct lamports for mint creation, metadata storage, and gas fees.
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The account that receives payment for the gas costs of registering the token on Base. */
  gasFeeReceiver: Address<TAccountGasFeeReceiver>;
  /**
   * The new SPL Token-2022 mint being created for the wrapped token.
   * - Uses PDA with token metadata hash and decimals for deterministic address
   * - Mint authority set to itself (mint account) for controlled minting
   * - Includes metadata pointer extension to store token information onchain
   */
  mint: Address<TAccountMint>;
  /**
   * The main bridge state account that tracks cross-chain operations.
   * Used to increment the nonce counter and manage EIP-1559 gas pricing.
   * Must be mutable to update the nonce after creating the outgoing message.
   */
  bridge: Address<TAccountBridge>;
  /**
   * The outgoing message account that stores the cross-chain call to register
   * the wrapped token on the Base blockchain. Contains the encoded function call
   * with token address, local mint address, and scaling parameters.
   */
  outgoingMessage: Address<TAccountOutgoingMessage>;
  /**
   * SPL Token-2022 program for creating the mint with metadata extensions.
   * Required for initializing tokens with advanced features like metadata pointers.
   */
  tokenProgram?: Address<TAccountTokenProgram>;
  /**
   * System program required for creating new accounts and transferring lamports.
   * Used internally by Anchor for account initialization and rent payments.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  outgoingMessageSalt: WrapTokenInstructionDataArgs['outgoingMessageSalt'];
  decimals: WrapTokenInstructionDataArgs['decimals'];
  name: WrapTokenInstructionDataArgs['name'];
  symbol: WrapTokenInstructionDataArgs['symbol'];
  remoteToken: WrapTokenInstructionDataArgs['remoteToken'];
  scalerExponent: WrapTokenInstructionDataArgs['scalerExponent'];
};

export function getWrapTokenInstruction<
  TAccountPayer extends string,
  TAccountGasFeeReceiver extends string,
  TAccountMint extends string,
  TAccountBridge extends string,
  TAccountOutgoingMessage extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: WrapTokenInput<
    TAccountPayer,
    TAccountGasFeeReceiver,
    TAccountMint,
    TAccountBridge,
    TAccountOutgoingMessage,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WrapTokenInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountGasFeeReceiver,
  TAccountMint,
  TAccountBridge,
  TAccountOutgoingMessage,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    gasFeeReceiver: { value: input.gasFeeReceiver ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: true },
    outgoingMessage: { value: input.outgoingMessage ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.gasFeeReceiver),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.outgoingMessage),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWrapTokenInstructionDataEncoder().encode(
      args as WrapTokenInstructionDataArgs
    ),
  } as WrapTokenInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGasFeeReceiver,
    TAccountMint,
    TAccountBridge,
    TAccountOutgoingMessage,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWrapTokenInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for the transaction and all account creation costs.
     * Must be mutable to deduct lamports for mint creation, metadata storage, and gas fees.
     */

    payer: TAccountMetas[0];
    /** The account that receives payment for the gas costs of registering the token on Base. */
    gasFeeReceiver: TAccountMetas[1];
    /**
     * The new SPL Token-2022 mint being created for the wrapped token.
     * - Uses PDA with token metadata hash and decimals for deterministic address
     * - Mint authority set to itself (mint account) for controlled minting
     * - Includes metadata pointer extension to store token information onchain
     */

    mint: TAccountMetas[2];
    /**
     * The main bridge state account that tracks cross-chain operations.
     * Used to increment the nonce counter and manage EIP-1559 gas pricing.
     * Must be mutable to update the nonce after creating the outgoing message.
     */

    bridge: TAccountMetas[3];
    /**
     * The outgoing message account that stores the cross-chain call to register
     * the wrapped token on the Base blockchain. Contains the encoded function call
     * with token address, local mint address, and scaling parameters.
     */

    outgoingMessage: TAccountMetas[4];
    /**
     * SPL Token-2022 program for creating the mint with metadata extensions.
     * Required for initializing tokens with advanced features like metadata pointers.
     */

    tokenProgram: TAccountMetas[5];
    /**
     * System program required for creating new accounts and transferring lamports.
     * Used internally by Anchor for account initialization and rent payments.
     */

    systemProgram: TAccountMetas[6];
  };
  data: WrapTokenInstructionData;
};

export function parseWrapTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWrapTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      gasFeeReceiver: getNextAccount(),
      mint: getNextAccount(),
      bridge: getNextAccount(),
      outgoingMessage: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWrapTokenInstructionDataDecoder().decode(instruction.data),
  };
}
