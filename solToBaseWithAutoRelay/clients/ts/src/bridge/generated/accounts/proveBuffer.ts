/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PROVE_BUFFER_DISCRIMINATOR = new Uint8Array([
  78, 160, 227, 163, 97, 140, 40, 149,
]);

export function getProveBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROVE_BUFFER_DISCRIMINATOR
  );
}

export type ProveBuffer = {
  discriminator: ReadonlyUint8Array;
  /** The owner who can modify and eventually consume this buffer */
  owner: Address;
  /** Serialized `Message` data (Anchor-serialized) */
  data: ReadonlyUint8Array;
  /** MMR proof nodes used to validate inclusion against an OutputRoot */
  proof: Array<ReadonlyUint8Array>;
};

export type ProveBufferArgs = {
  /** The owner who can modify and eventually consume this buffer */
  owner: Address;
  /** Serialized `Message` data (Anchor-serialized) */
  data: ReadonlyUint8Array;
  /** MMR proof nodes used to validate inclusion against an OutputRoot */
  proof: Array<ReadonlyUint8Array>;
};

export function getProveBufferEncoder(): Encoder<ProveBufferArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
    ]),
    (value) => ({ ...value, discriminator: PROVE_BUFFER_DISCRIMINATOR })
  );
}

export function getProveBufferDecoder(): Decoder<ProveBuffer> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
  ]);
}

export function getProveBufferCodec(): Codec<ProveBufferArgs, ProveBuffer> {
  return combineCodec(getProveBufferEncoder(), getProveBufferDecoder());
}

export function decodeProveBuffer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProveBuffer, TAddress>;
export function decodeProveBuffer<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProveBuffer, TAddress>;
export function decodeProveBuffer<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProveBuffer, TAddress> | MaybeAccount<ProveBuffer, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProveBufferDecoder()
  );
}

export async function fetchProveBuffer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProveBuffer, TAddress>> {
  const maybeAccount = await fetchMaybeProveBuffer(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProveBuffer<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProveBuffer, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProveBuffer(maybeAccount);
}

export async function fetchAllProveBuffer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProveBuffer>[]> {
  const maybeAccounts = await fetchAllMaybeProveBuffer(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProveBuffer(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProveBuffer>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProveBuffer(maybeAccount));
}
