/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getBridgeBaseToSolanaStateIncomingMessageMessageDecoder,
  getBridgeBaseToSolanaStateIncomingMessageMessageEncoder,
  type BridgeBaseToSolanaStateIncomingMessageMessage,
  type BridgeBaseToSolanaStateIncomingMessageMessageArgs,
} from '../types';

export const INCOMING_MESSAGE_DISCRIMINATOR = new Uint8Array([
  30, 144, 125, 111, 211, 223, 91, 170,
]);

export function getIncomingMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCOMING_MESSAGE_DISCRIMINATOR
  );
}

export type IncomingMessage = {
  discriminator: ReadonlyUint8Array;
  /**
   * The 20-byte EVM address of the sender on Base who initiated this bridge operation.
   * Used to derive the bridge CPI authority PDA that signs downstream CPIs during relay.
   * This field does not restrict who can call the relay instruction.
   */
  sender: ReadonlyUint8Array;
  /**
   * The actual message payload containing either instruction calls or token transfer data.
   * This enum determines what type of operation will be executed on Solana.
   */
  message: BridgeBaseToSolanaStateIncomingMessageMessage;
  /**
   * Flag indicating whether this message has been successfully executed on Solana.
   * Once set to true, the message cannot be executed again, preventing replay attacks.
   */
  executed: boolean;
};

export type IncomingMessageArgs = {
  /**
   * The 20-byte EVM address of the sender on Base who initiated this bridge operation.
   * Used to derive the bridge CPI authority PDA that signs downstream CPIs during relay.
   * This field does not restrict who can call the relay instruction.
   */
  sender: ReadonlyUint8Array;
  /**
   * The actual message payload containing either instruction calls or token transfer data.
   * This enum determines what type of operation will be executed on Solana.
   */
  message: BridgeBaseToSolanaStateIncomingMessageMessageArgs;
  /**
   * Flag indicating whether this message has been successfully executed on Solana.
   * Once set to true, the message cannot be executed again, preventing replay attacks.
   */
  executed: boolean;
};

export function getIncomingMessageEncoder(): Encoder<IncomingMessageArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['sender', fixEncoderSize(getBytesEncoder(), 20)],
      ['message', getBridgeBaseToSolanaStateIncomingMessageMessageEncoder()],
      ['executed', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INCOMING_MESSAGE_DISCRIMINATOR })
  );
}

export function getIncomingMessageDecoder(): Decoder<IncomingMessage> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['sender', fixDecoderSize(getBytesDecoder(), 20)],
    ['message', getBridgeBaseToSolanaStateIncomingMessageMessageDecoder()],
    ['executed', getBooleanDecoder()],
  ]);
}

export function getIncomingMessageCodec(): Codec<
  IncomingMessageArgs,
  IncomingMessage
> {
  return combineCodec(getIncomingMessageEncoder(), getIncomingMessageDecoder());
}

export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<IncomingMessage, TAddress>;
export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<IncomingMessage, TAddress>;
export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<IncomingMessage, TAddress>
  | MaybeAccount<IncomingMessage, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getIncomingMessageDecoder()
  );
}

export async function fetchIncomingMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<IncomingMessage, TAddress>> {
  const maybeAccount = await fetchMaybeIncomingMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeIncomingMessage<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<IncomingMessage, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeIncomingMessage(maybeAccount);
}

export async function fetchAllIncomingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<IncomingMessage>[]> {
  const maybeAccounts = await fetchAllMaybeIncomingMessage(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeIncomingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<IncomingMessage>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeIncomingMessage(maybeAccount)
  );
}
