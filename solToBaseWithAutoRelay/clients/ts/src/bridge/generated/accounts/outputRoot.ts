/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const OUTPUT_ROOT_DISCRIMINATOR = new Uint8Array([
  11, 31, 168, 201, 229, 8, 180, 198,
]);

export function getOutputRootDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(OUTPUT_ROOT_DISCRIMINATOR);
}

export type OutputRoot = {
  discriminator: ReadonlyUint8Array;
  /**
   * The 32-byte MMR root that commits to all outgoing bridge messages on Base
   * as of the specified Base block number.
   */
  root: ReadonlyUint8Array;
  /**
   * The total number of leaves that were present in the MMR when this root
   * was generated. This is crucial for determining the MMR structure and
   * mountain configuration at the time of proof validation.
   */
  totalLeafCount: bigint;
};

export type OutputRootArgs = {
  /**
   * The 32-byte MMR root that commits to all outgoing bridge messages on Base
   * as of the specified Base block number.
   */
  root: ReadonlyUint8Array;
  /**
   * The total number of leaves that were present in the MMR when this root
   * was generated. This is crucial for determining the MMR structure and
   * mountain configuration at the time of proof validation.
   */
  totalLeafCount: number | bigint;
};

export function getOutputRootEncoder(): FixedSizeEncoder<OutputRootArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['root', fixEncoderSize(getBytesEncoder(), 32)],
      ['totalLeafCount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OUTPUT_ROOT_DISCRIMINATOR })
  );
}

export function getOutputRootDecoder(): FixedSizeDecoder<OutputRoot> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['root', fixDecoderSize(getBytesDecoder(), 32)],
    ['totalLeafCount', getU64Decoder()],
  ]);
}

export function getOutputRootCodec(): FixedSizeCodec<
  OutputRootArgs,
  OutputRoot
> {
  return combineCodec(getOutputRootEncoder(), getOutputRootDecoder());
}

export function decodeOutputRoot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<OutputRoot, TAddress>;
export function decodeOutputRoot<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<OutputRoot, TAddress>;
export function decodeOutputRoot<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<OutputRoot, TAddress> | MaybeAccount<OutputRoot, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOutputRootDecoder()
  );
}

export async function fetchOutputRoot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<OutputRoot, TAddress>> {
  const maybeAccount = await fetchMaybeOutputRoot(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOutputRoot<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<OutputRoot, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOutputRoot(maybeAccount);
}

export async function fetchAllOutputRoot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<OutputRoot>[]> {
  const maybeAccounts = await fetchAllMaybeOutputRoot(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOutputRoot(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<OutputRoot>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeOutputRoot(maybeAccount));
}

export function getOutputRootSize(): number {
  return 48;
}
