/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedInitializeInstruction,
  type ParsedPayForRelayInstruction,
  type ParsedSetEip1559ConfigInstruction,
  type ParsedSetGasConfigInstruction,
  type ParsedSetGuardianInstruction,
} from '../instructions';

export const BASE_RELAYER_PROGRAM_ADDRESS = '' as Address<''>;

export enum BaseRelayerAccount {
  Cfg,
  MessageToRelay,
}

export function identifyBaseRelayerAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BaseRelayerAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([236, 69, 240, 199, 189, 123, 35, 99])
      ),
      0
    )
  ) {
    return BaseRelayerAccount.Cfg;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([194, 113, 145, 222, 76, 51, 252, 102])
      ),
      0
    )
  ) {
    return BaseRelayerAccount.MessageToRelay;
  }
  throw new Error(
    'The provided account could not be identified as a baseRelayer account.'
  );
}

export enum BaseRelayerInstruction {
  Initialize,
  PayForRelay,
  SetEip1559Config,
  SetGasConfig,
  SetGuardian,
}

export function identifyBaseRelayerInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BaseRelayerInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return BaseRelayerInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 191, 218, 201, 250, 164, 156, 55])
      ),
      0
    )
  ) {
    return BaseRelayerInstruction.PayForRelay;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 222, 225, 215, 15, 3, 82, 102])
      ),
      0
    )
  ) {
    return BaseRelayerInstruction.SetEip1559Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([244, 68, 172, 138, 187, 145, 160, 192])
      ),
      0
    )
  ) {
    return BaseRelayerInstruction.SetGasConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 243, 50, 121, 154, 164, 50, 30])
      ),
      0
    )
  ) {
    return BaseRelayerInstruction.SetGuardian;
  }
  throw new Error(
    'The provided instruction could not be identified as a baseRelayer instruction.'
  );
}

export type ParsedBaseRelayerInstruction<
  TProgram extends string = 'undefined',
> =
  | ({
      instructionType: BaseRelayerInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: BaseRelayerInstruction.PayForRelay;
    } & ParsedPayForRelayInstruction<TProgram>)
  | ({
      instructionType: BaseRelayerInstruction.SetEip1559Config;
    } & ParsedSetEip1559ConfigInstruction<TProgram>)
  | ({
      instructionType: BaseRelayerInstruction.SetGasConfig;
    } & ParsedSetGasConfigInstruction<TProgram>)
  | ({
      instructionType: BaseRelayerInstruction.SetGuardian;
    } & ParsedSetGuardianInstruction<TProgram>);
