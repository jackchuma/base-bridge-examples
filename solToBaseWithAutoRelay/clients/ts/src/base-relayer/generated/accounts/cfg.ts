/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getEip1559Decoder,
  getEip1559Encoder,
  getGasConfigDecoder,
  getGasConfigEncoder,
  type Eip1559,
  type Eip1559Args,
  type GasConfig,
  type GasConfigArgs,
} from '../types';

export const CFG_DISCRIMINATOR = new Uint8Array([
  236, 69, 240, 199, 189, 123, 35, 99,
]);

export function getCfgDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CFG_DISCRIMINATOR);
}

export type Cfg = {
  discriminator: ReadonlyUint8Array;
  /** Canonical nonce */
  nonce: bigint;
  /** Guardian pubkey authorized to update configuration */
  guardian: Address;
  /** EIP-1559 state and configuration for dynamic pricing. */
  eip1559: Eip1559;
  /** Gas configuration */
  gasConfig: GasConfig;
};

export type CfgArgs = {
  /** Canonical nonce */
  nonce: number | bigint;
  /** Guardian pubkey authorized to update configuration */
  guardian: Address;
  /** EIP-1559 state and configuration for dynamic pricing. */
  eip1559: Eip1559Args;
  /** Gas configuration */
  gasConfig: GasConfigArgs;
};

export function getCfgEncoder(): FixedSizeEncoder<CfgArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU64Encoder()],
      ['guardian', getAddressEncoder()],
      ['eip1559', getEip1559Encoder()],
      ['gasConfig', getGasConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CFG_DISCRIMINATOR })
  );
}

export function getCfgDecoder(): FixedSizeDecoder<Cfg> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU64Decoder()],
    ['guardian', getAddressDecoder()],
    ['eip1559', getEip1559Decoder()],
    ['gasConfig', getGasConfigDecoder()],
  ]);
}

export function getCfgCodec(): FixedSizeCodec<CfgArgs, Cfg> {
  return combineCodec(getCfgEncoder(), getCfgDecoder());
}

export function decodeCfg<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Cfg, TAddress>;
export function decodeCfg<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Cfg, TAddress>;
export function decodeCfg<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Cfg, TAddress> | MaybeAccount<Cfg, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCfgDecoder()
  );
}

export async function fetchCfg<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Cfg, TAddress>> {
  const maybeAccount = await fetchMaybeCfg(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCfg<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Cfg, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCfg(maybeAccount);
}

export async function fetchAllCfg(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Cfg>[]> {
  const maybeAccounts = await fetchAllMaybeCfg(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCfg(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Cfg>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCfg(maybeAccount));
}

export function getCfgSize(): number {
  return 168;
}
