/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BASE_RELAYER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PAY_FOR_RELAY_DISCRIMINATOR = new Uint8Array([
  41, 191, 218, 201, 250, 164, 156, 55,
]);

export function getPayForRelayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PAY_FOR_RELAY_DISCRIMINATOR
  );
}

export type PayForRelayInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCfg extends string | AccountMeta<string> = string,
  TAccountGasFeeReceiver extends string | AccountMeta<string> = string,
  TAccountMessageToRelay extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCfg extends string ? WritableAccount<TAccountCfg> : TAccountCfg,
      TAccountGasFeeReceiver extends string
        ? WritableAccount<TAccountGasFeeReceiver>
        : TAccountGasFeeReceiver,
      TAccountMessageToRelay extends string
        ? WritableAccount<TAccountMessageToRelay>
        : TAccountMessageToRelay,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PayForRelayInstructionData = {
  discriminator: ReadonlyUint8Array;
  mtrSalt: ReadonlyUint8Array;
  outgoingMessage: Address;
  gasLimit: bigint;
};

export type PayForRelayInstructionDataArgs = {
  mtrSalt: ReadonlyUint8Array;
  outgoingMessage: Address;
  gasLimit: number | bigint;
};

export function getPayForRelayInstructionDataEncoder(): FixedSizeEncoder<PayForRelayInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mtrSalt', fixEncoderSize(getBytesEncoder(), 32)],
      ['outgoingMessage', getAddressEncoder()],
      ['gasLimit', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PAY_FOR_RELAY_DISCRIMINATOR })
  );
}

export function getPayForRelayInstructionDataDecoder(): FixedSizeDecoder<PayForRelayInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mtrSalt', fixDecoderSize(getBytesDecoder(), 32)],
    ['outgoingMessage', getAddressDecoder()],
    ['gasLimit', getU64Decoder()],
  ]);
}

export function getPayForRelayInstructionDataCodec(): FixedSizeCodec<
  PayForRelayInstructionDataArgs,
  PayForRelayInstructionData
> {
  return combineCodec(
    getPayForRelayInstructionDataEncoder(),
    getPayForRelayInstructionDataDecoder()
  );
}

export type PayForRelayInput<
  TAccountPayer extends string = string,
  TAccountCfg extends string = string,
  TAccountGasFeeReceiver extends string = string,
  TAccountMessageToRelay extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for transaction fees and account creation.
   * Must be mutable to deduct lamports for account rent and gas fees.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The relayer config state account that tracks fee parameters.
   * - Uses PDA with CFG_SEED for deterministic address
   * - Mutable to update EIP1559 fee data
   */
  cfg: Address<TAccountCfg>;
  /** The account that receives payment for the gas costs of bridging SOL to Base. */
  gasFeeReceiver: Address<TAccountGasFeeReceiver>;
  messageToRelay: Address<TAccountMessageToRelay>;
  /**
   * System program required for creating new accounts.
   * Used internally by Anchor for account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  mtrSalt: PayForRelayInstructionDataArgs['mtrSalt'];
  outgoingMessage: PayForRelayInstructionDataArgs['outgoingMessage'];
  gasLimit: PayForRelayInstructionDataArgs['gasLimit'];
};

export function getPayForRelayInstruction<
  TAccountPayer extends string,
  TAccountCfg extends string,
  TAccountGasFeeReceiver extends string,
  TAccountMessageToRelay extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BASE_RELAYER_PROGRAM_ADDRESS,
>(
  input: PayForRelayInput<
    TAccountPayer,
    TAccountCfg,
    TAccountGasFeeReceiver,
    TAccountMessageToRelay,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PayForRelayInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCfg,
  TAccountGasFeeReceiver,
  TAccountMessageToRelay,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BASE_RELAYER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    cfg: { value: input.cfg ?? null, isWritable: true },
    gasFeeReceiver: { value: input.gasFeeReceiver ?? null, isWritable: true },
    messageToRelay: { value: input.messageToRelay ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.cfg),
      getAccountMeta(accounts.gasFeeReceiver),
      getAccountMeta(accounts.messageToRelay),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPayForRelayInstructionDataEncoder().encode(
      args as PayForRelayInstructionDataArgs
    ),
  } as PayForRelayInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCfg,
    TAccountGasFeeReceiver,
    TAccountMessageToRelay,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedPayForRelayInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for transaction fees and account creation.
     * Must be mutable to deduct lamports for account rent and gas fees.
     */

    payer: TAccountMetas[0];
    /**
     * The relayer config state account that tracks fee parameters.
     * - Uses PDA with CFG_SEED for deterministic address
     * - Mutable to update EIP1559 fee data
     */

    cfg: TAccountMetas[1];
    /** The account that receives payment for the gas costs of bridging SOL to Base. */
    gasFeeReceiver: TAccountMetas[2];
    messageToRelay: TAccountMetas[3];
    /**
     * System program required for creating new accounts.
     * Used internally by Anchor for account initialization.
     */

    systemProgram: TAccountMetas[4];
  };
  data: PayForRelayInstructionData;
};

export function parsePayForRelayInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPayForRelayInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      cfg: getNextAccount(),
      gasFeeReceiver: getNextAccount(),
      messageToRelay: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getPayForRelayInstructionDataDecoder().decode(instruction.data),
  };
}
