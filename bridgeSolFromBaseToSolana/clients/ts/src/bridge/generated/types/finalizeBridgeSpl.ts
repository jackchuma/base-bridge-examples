/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

/**
 * Instruction data for finalizing a bridged SPL token transfer from Base to Solana.
 *
 * Releases tokens from a program-controlled vault PDA to the specified recipient
 * token account on Solana.
 */

export type FinalizeBridgeSpl = {
  /**
   * The 20-byte ERC-20 contract address on Base that corresponds to the SPL mint.
   * Used, together with the SPL mint, to derive the token-vault PDA for this mapping.
   */
  remoteToken: ReadonlyUint8Array;
  /** The SPL token mint on Solana that mirrors the `remote_token`. */
  localToken: Address;
  /**
   * The recipient SPL token account address on Solana that will receive tokens.
   * This must be a valid token account for `local_token`.
   * Note: this program does not enforce ownership or ATA semantics; the account
   * is authenticated by address equality (`self.to`) and `transfer_checked`
   * enforces the mint match.
   */
  to: Address;
  /**
   * The amount to transfer, in base units of the mint (respecting mint decimals).
   * `transfer_checked` enforces that the destination account's mint matches and
   * the decimals are correct.
   */
  amount: bigint;
};

export type FinalizeBridgeSplArgs = {
  /**
   * The 20-byte ERC-20 contract address on Base that corresponds to the SPL mint.
   * Used, together with the SPL mint, to derive the token-vault PDA for this mapping.
   */
  remoteToken: ReadonlyUint8Array;
  /** The SPL token mint on Solana that mirrors the `remote_token`. */
  localToken: Address;
  /**
   * The recipient SPL token account address on Solana that will receive tokens.
   * This must be a valid token account for `local_token`.
   * Note: this program does not enforce ownership or ATA semantics; the account
   * is authenticated by address equality (`self.to`) and `transfer_checked`
   * enforces the mint match.
   */
  to: Address;
  /**
   * The amount to transfer, in base units of the mint (respecting mint decimals).
   * `transfer_checked` enforces that the destination account's mint matches and
   * the decimals are correct.
   */
  amount: number | bigint;
};

export function getFinalizeBridgeSplEncoder(): FixedSizeEncoder<FinalizeBridgeSplArgs> {
  return getStructEncoder([
    ['remoteToken', fixEncoderSize(getBytesEncoder(), 20)],
    ['localToken', getAddressEncoder()],
    ['to', getAddressEncoder()],
    ['amount', getU64Encoder()],
  ]);
}

export function getFinalizeBridgeSplDecoder(): FixedSizeDecoder<FinalizeBridgeSpl> {
  return getStructDecoder([
    ['remoteToken', fixDecoderSize(getBytesDecoder(), 20)],
    ['localToken', getAddressDecoder()],
    ['to', getAddressDecoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getFinalizeBridgeSplCodec(): FixedSizeCodec<
  FinalizeBridgeSplArgs,
  FinalizeBridgeSpl
> {
  return combineCodec(
    getFinalizeBridgeSplEncoder(),
    getFinalizeBridgeSplDecoder()
  );
}
