/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getBridgeSolanaToBaseStateOutgoingMessageTransferDecoder,
  getBridgeSolanaToBaseStateOutgoingMessageTransferEncoder,
  getCallDecoder,
  getCallEncoder,
  type BridgeSolanaToBaseStateOutgoingMessageTransfer,
  type BridgeSolanaToBaseStateOutgoingMessageTransferArgs,
  type Call,
  type CallArgs,
} from '.';

/**
 * Represents the type of cross-chain operation to be executed on Base.
 * This enum encapsulates the two main types of operations supported by the bridge:
 * direct contract calls and token transfers with optional contract calls.
 */

export type BridgeSolanaToBaseStateOutgoingMessageMessage =
  | { __kind: 'Call'; fields: readonly [Call] }
  | {
      __kind: 'Transfer';
      fields: readonly [BridgeSolanaToBaseStateOutgoingMessageTransfer];
    };

export type BridgeSolanaToBaseStateOutgoingMessageMessageArgs =
  | { __kind: 'Call'; fields: readonly [CallArgs] }
  | {
      __kind: 'Transfer';
      fields: readonly [BridgeSolanaToBaseStateOutgoingMessageTransferArgs];
    };

export function getBridgeSolanaToBaseStateOutgoingMessageMessageEncoder(): Encoder<BridgeSolanaToBaseStateOutgoingMessageMessageArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Call',
      getStructEncoder([['fields', getTupleEncoder([getCallEncoder()])]]),
    ],
    [
      'Transfer',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([
            getBridgeSolanaToBaseStateOutgoingMessageTransferEncoder(),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getBridgeSolanaToBaseStateOutgoingMessageMessageDecoder(): Decoder<BridgeSolanaToBaseStateOutgoingMessageMessage> {
  return getDiscriminatedUnionDecoder([
    [
      'Call',
      getStructDecoder([['fields', getTupleDecoder([getCallDecoder()])]]),
    ],
    [
      'Transfer',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([
            getBridgeSolanaToBaseStateOutgoingMessageTransferDecoder(),
          ]),
        ],
      ]),
    ],
  ]);
}

export function getBridgeSolanaToBaseStateOutgoingMessageMessageCodec(): Codec<
  BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
  BridgeSolanaToBaseStateOutgoingMessageMessage
> {
  return combineCodec(
    getBridgeSolanaToBaseStateOutgoingMessageMessageEncoder(),
    getBridgeSolanaToBaseStateOutgoingMessageMessageDecoder()
  );
}

// Data Enum Helpers.
export function bridgeSolanaToBaseStateOutgoingMessageMessage(
  kind: 'Call',
  data: GetDiscriminatedUnionVariantContent<
    BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
    '__kind',
    'Call'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
  '__kind',
  'Call'
>;
export function bridgeSolanaToBaseStateOutgoingMessageMessage(
  kind: 'Transfer',
  data: GetDiscriminatedUnionVariantContent<
    BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
    '__kind',
    'Transfer'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
  '__kind',
  'Transfer'
>;
export function bridgeSolanaToBaseStateOutgoingMessageMessage<
  K extends BridgeSolanaToBaseStateOutgoingMessageMessageArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBridgeSolanaToBaseStateOutgoingMessageMessage<
  K extends BridgeSolanaToBaseStateOutgoingMessageMessage['__kind'],
>(
  kind: K,
  value: BridgeSolanaToBaseStateOutgoingMessageMessage
): value is BridgeSolanaToBaseStateOutgoingMessageMessage & { __kind: K } {
  return value.__kind === kind;
}
