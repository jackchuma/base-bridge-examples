/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getIxAccountDecoder,
  getIxAccountEncoder,
  type IxAccount,
  type IxAccountArgs,
} from '.';

/**
 * Instruction to be executed by the bridge program via signed CPI during message relay.
 * Functionally equivalent to a Solana `Instruction`, but serialized with Anchor for cross-program messaging.
 */

export type Ix = {
  /** Program that will process this instruction. */
  programId: Address;
  /** Accounts required for this instruction. */
  accounts: Array<IxAccount>;
  /** Instruction data. */
  data: ReadonlyUint8Array;
};

export type IxArgs = {
  /** Program that will process this instruction. */
  programId: Address;
  /** Accounts required for this instruction. */
  accounts: Array<IxAccountArgs>;
  /** Instruction data. */
  data: ReadonlyUint8Array;
};

export function getIxEncoder(): Encoder<IxArgs> {
  return getStructEncoder([
    ['programId', getAddressEncoder()],
    ['accounts', getArrayEncoder(getIxAccountEncoder())],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getIxDecoder(): Decoder<Ix> {
  return getStructDecoder([
    ['programId', getAddressDecoder()],
    ['accounts', getArrayDecoder(getIxAccountDecoder())],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getIxCodec(): Codec<IxArgs, Ix> {
  return combineCodec(getIxEncoder(), getIxDecoder());
}
