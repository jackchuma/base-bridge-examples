/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_CALL_BUFFER_DISCRIMINATOR = new Uint8Array([
  132, 188, 7, 198, 64, 178, 62, 29,
]);

export function getCloseCallBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_CALL_BUFFER_DISCRIMINATOR
  );
}

export type CloseCallBufferInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountCallBuffer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCallBuffer extends string
        ? WritableAccount<TAccountCallBuffer>
        : TAccountCallBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type CloseCallBufferInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseCallBufferInstructionDataArgs = {};

export function getCloseCallBufferInstructionDataEncoder(): FixedSizeEncoder<CloseCallBufferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_CALL_BUFFER_DISCRIMINATOR })
  );
}

export function getCloseCallBufferInstructionDataDecoder(): FixedSizeDecoder<CloseCallBufferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseCallBufferInstructionDataCodec(): FixedSizeCodec<
  CloseCallBufferInstructionDataArgs,
  CloseCallBufferInstructionData
> {
  return combineCodec(
    getCloseCallBufferInstructionDataEncoder(),
    getCloseCallBufferInstructionDataDecoder()
  );
}

export type CloseCallBufferInput<
  TAccountOwner extends string = string,
  TAccountCallBuffer extends string = string,
> = {
  /**
   * The account paying for the transaction fees and receiving the rent back.
   * It must be the owner of the call buffer account.
   */
  owner: TransactionSigner<TAccountOwner>;
  /** The call buffer account to close */
  callBuffer: Address<TAccountCallBuffer>;
};

export function getCloseCallBufferInstruction<
  TAccountOwner extends string,
  TAccountCallBuffer extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: CloseCallBufferInput<TAccountOwner, TAccountCallBuffer>,
  config?: { programAddress?: TProgramAddress }
): CloseCallBufferInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountCallBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    callBuffer: { value: input.callBuffer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.callBuffer),
    ],
    programAddress,
    data: getCloseCallBufferInstructionDataEncoder().encode({}),
  } as CloseCallBufferInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountCallBuffer
  >;

  return instruction;
}

export type ParsedCloseCallBufferInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account paying for the transaction fees and receiving the rent back.
     * It must be the owner of the call buffer account.
     */

    owner: TAccountMetas[0];
    /** The call buffer account to close */
    callBuffer: TAccountMetas[1];
  };
  data: CloseCallBufferInstructionData;
};

export function parseCloseCallBufferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseCallBufferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      callBuffer: getNextAccount(),
    },
    data: getCloseCallBufferInstructionDataDecoder().decode(instruction.data),
  };
}
