/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PROVE_MESSAGE_BUFFERED_DISCRIMINATOR = new Uint8Array([
  211, 48, 193, 183, 2, 51, 102, 159,
]);

export function getProveMessageBufferedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROVE_MESSAGE_BUFFERED_DISCRIMINATOR
  );
}

export type ProveMessageBufferedInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountOutputRoot extends string | AccountMeta<string> = string,
  TAccountMessage extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProveBuffer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOutputRoot extends string
        ? ReadonlyAccount<TAccountOutputRoot>
        : TAccountOutputRoot,
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountBridge extends string
        ? ReadonlyAccount<TAccountBridge>
        : TAccountBridge,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProveBuffer extends string
        ? WritableAccount<TAccountProveBuffer>
        : TAccountProveBuffer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProveMessageBufferedInstructionData = {
  discriminator: ReadonlyUint8Array;
  nonce: bigint;
  sender: ReadonlyUint8Array;
  messageHash: ReadonlyUint8Array;
};

export type ProveMessageBufferedInstructionDataArgs = {
  nonce: number | bigint;
  sender: ReadonlyUint8Array;
  messageHash: ReadonlyUint8Array;
};

export function getProveMessageBufferedInstructionDataEncoder(): FixedSizeEncoder<ProveMessageBufferedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU64Encoder()],
      ['sender', fixEncoderSize(getBytesEncoder(), 20)],
      ['messageHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: PROVE_MESSAGE_BUFFERED_DISCRIMINATOR,
    })
  );
}

export function getProveMessageBufferedInstructionDataDecoder(): FixedSizeDecoder<ProveMessageBufferedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU64Decoder()],
    ['sender', fixDecoderSize(getBytesDecoder(), 20)],
    ['messageHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getProveMessageBufferedInstructionDataCodec(): FixedSizeCodec<
  ProveMessageBufferedInstructionDataArgs,
  ProveMessageBufferedInstructionData
> {
  return combineCodec(
    getProveMessageBufferedInstructionDataEncoder(),
    getProveMessageBufferedInstructionDataDecoder()
  );
}

export type ProveMessageBufferedInput<
  TAccountPayer extends string = string,
  TAccountOutputRoot extends string = string,
  TAccountMessage extends string = string,
  TAccountBridge extends string = string,
  TAccountOwner extends string = string,
  TAccountProveBuffer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Payer funds the IncomingMessage account */
  payer: TransactionSigner<TAccountPayer>;
  /** Output root to verify the proof against */
  outputRoot: Address<TAccountOutputRoot>;
  /** The incoming message account created if proof verifies */
  message: Address<TAccountMessage>;
  /** Bridge for pause check */
  bridge: Address<TAccountBridge>;
  /** Owner receives rent when buffer is closed */
  owner: TransactionSigner<TAccountOwner>;
  /** Prove buffer containing data and proof; closed on success */
  proveBuffer: Address<TAccountProveBuffer>;
  systemProgram?: Address<TAccountSystemProgram>;
  nonce: ProveMessageBufferedInstructionDataArgs['nonce'];
  sender: ProveMessageBufferedInstructionDataArgs['sender'];
  messageHash: ProveMessageBufferedInstructionDataArgs['messageHash'];
};

export function getProveMessageBufferedInstruction<
  TAccountPayer extends string,
  TAccountOutputRoot extends string,
  TAccountMessage extends string,
  TAccountBridge extends string,
  TAccountOwner extends string,
  TAccountProveBuffer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: ProveMessageBufferedInput<
    TAccountPayer,
    TAccountOutputRoot,
    TAccountMessage,
    TAccountBridge,
    TAccountOwner,
    TAccountProveBuffer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProveMessageBufferedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountOutputRoot,
  TAccountMessage,
  TAccountBridge,
  TAccountOwner,
  TAccountProveBuffer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    outputRoot: { value: input.outputRoot ?? null, isWritable: false },
    message: { value: input.message ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    proveBuffer: { value: input.proveBuffer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.outputRoot),
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.proveBuffer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProveMessageBufferedInstructionDataEncoder().encode(
      args as ProveMessageBufferedInstructionDataArgs
    ),
  } as ProveMessageBufferedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOutputRoot,
    TAccountMessage,
    TAccountBridge,
    TAccountOwner,
    TAccountProveBuffer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProveMessageBufferedInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Payer funds the IncomingMessage account */
    payer: TAccountMetas[0];
    /** Output root to verify the proof against */
    outputRoot: TAccountMetas[1];
    /** The incoming message account created if proof verifies */
    message: TAccountMetas[2];
    /** Bridge for pause check */
    bridge: TAccountMetas[3];
    /** Owner receives rent when buffer is closed */
    owner: TAccountMetas[4];
    /** Prove buffer containing data and proof; closed on success */
    proveBuffer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: ProveMessageBufferedInstructionData;
};

export function parseProveMessageBufferedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProveMessageBufferedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      outputRoot: getNextAccount(),
      message: getNextAccount(),
      bridge: getNextAccount(),
      owner: getNextAccount(),
      proveBuffer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProveMessageBufferedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
