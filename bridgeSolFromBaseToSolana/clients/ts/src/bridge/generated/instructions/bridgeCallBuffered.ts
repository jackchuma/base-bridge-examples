/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BRIDGE_CALL_BUFFERED_DISCRIMINATOR = new Uint8Array([
  138, 112, 52, 204, 33, 68, 62, 85,
]);

export function getBridgeCallBufferedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BRIDGE_CALL_BUFFERED_DISCRIMINATOR
  );
}

export type BridgeCallBufferedInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountFrom extends string | AccountMeta<string> = string,
  TAccountGasFeeReceiver extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountCallBuffer extends string | AccountMeta<string> = string,
  TAccountOutgoingMessage extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountFrom extends string
        ? ReadonlySignerAccount<TAccountFrom> & AccountSignerMeta<TAccountFrom>
        : TAccountFrom,
      TAccountGasFeeReceiver extends string
        ? WritableAccount<TAccountGasFeeReceiver>
        : TAccountGasFeeReceiver,
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCallBuffer extends string
        ? WritableAccount<TAccountCallBuffer>
        : TAccountCallBuffer,
      TAccountOutgoingMessage extends string
        ? WritableAccount<TAccountOutgoingMessage>
        : TAccountOutgoingMessage,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BridgeCallBufferedInstructionData = {
  discriminator: ReadonlyUint8Array;
  outgoingMessageSalt: ReadonlyUint8Array;
};

export type BridgeCallBufferedInstructionDataArgs = {
  outgoingMessageSalt: ReadonlyUint8Array;
};

export function getBridgeCallBufferedInstructionDataEncoder(): FixedSizeEncoder<BridgeCallBufferedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['outgoingMessageSalt', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: BRIDGE_CALL_BUFFERED_DISCRIMINATOR })
  );
}

export function getBridgeCallBufferedInstructionDataDecoder(): FixedSizeDecoder<BridgeCallBufferedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['outgoingMessageSalt', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getBridgeCallBufferedInstructionDataCodec(): FixedSizeCodec<
  BridgeCallBufferedInstructionDataArgs,
  BridgeCallBufferedInstructionData
> {
  return combineCodec(
    getBridgeCallBufferedInstructionDataEncoder(),
    getBridgeCallBufferedInstructionDataDecoder()
  );
}

export type BridgeCallBufferedInput<
  TAccountPayer extends string = string,
  TAccountFrom extends string = string,
  TAccountGasFeeReceiver extends string = string,
  TAccountBridge extends string = string,
  TAccountOwner extends string = string,
  TAccountCallBuffer extends string = string,
  TAccountOutgoingMessage extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for outgoing message account creation and the gas fee.
   * Must be mutable to deduct lamports for rent and the EIP-1559-based gas fee.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The account initiating the bridge call on Solana.
   * This account's public key is recorded as the `sender` in the cross-chain message.
   */
  from: TransactionSigner<TAccountFrom>;
  /** The account that receives payment for the gas costs of bridging the call to Base. */
  gasFeeReceiver: Address<TAccountGasFeeReceiver>;
  /**
   * The main bridge state account containing global configuration and runtime state.
   * - PDA with `BRIDGE_SEED`
   * - Mutable to charge gas (EIP-1559 accounting) and increment the message nonce
   * - Provides the current nonce for message ordering
   */
  bridge: Address<TAccountBridge>;
  /** The owner of the call buffer who will receive the rent refund. */
  owner: TransactionSigner<TAccountOwner>;
  /**
   * The call buffer account that stores the call parameters and data.
   * Its contents are copied into the outgoing message. The account is then
   * closed by Anchor (via `close = owner`), refunding its rent to `owner`.
   */
  callBuffer: Address<TAccountCallBuffer>;
  /**
   * The outgoing message account that stores the cross-chain message (header + payload).
   * - Created fresh for each call; the provided keypair determines its address
   * - Funded by `payer`
   * - Space: DISCRIMINATOR_LEN + serialized `OutgoingMessage`
   * Sizing uses `OutgoingMessage::space(Some(call_buffer.data.len()))`, which
   * intentionally allocates for the Transfer variant (worst case) to safely
   * cover the Call variant
   * - Includes `nonce` and `sender` metadata used on Base
   */
  outgoingMessage: Address<TAccountOutgoingMessage>;
  /**
   * System program required for creating the outgoing message account.
   * Used internally by Anchor for account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  outgoingMessageSalt: BridgeCallBufferedInstructionDataArgs['outgoingMessageSalt'];
};

export function getBridgeCallBufferedInstruction<
  TAccountPayer extends string,
  TAccountFrom extends string,
  TAccountGasFeeReceiver extends string,
  TAccountBridge extends string,
  TAccountOwner extends string,
  TAccountCallBuffer extends string,
  TAccountOutgoingMessage extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: BridgeCallBufferedInput<
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountBridge,
    TAccountOwner,
    TAccountCallBuffer,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BridgeCallBufferedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountFrom,
  TAccountGasFeeReceiver,
  TAccountBridge,
  TAccountOwner,
  TAccountCallBuffer,
  TAccountOutgoingMessage,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: false },
    gasFeeReceiver: { value: input.gasFeeReceiver ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    callBuffer: { value: input.callBuffer ?? null, isWritable: true },
    outgoingMessage: { value: input.outgoingMessage ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.gasFeeReceiver),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.callBuffer),
      getAccountMeta(accounts.outgoingMessage),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBridgeCallBufferedInstructionDataEncoder().encode(
      args as BridgeCallBufferedInstructionDataArgs
    ),
  } as BridgeCallBufferedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountBridge,
    TAccountOwner,
    TAccountCallBuffer,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBridgeCallBufferedInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for outgoing message account creation and the gas fee.
     * Must be mutable to deduct lamports for rent and the EIP-1559-based gas fee.
     */

    payer: TAccountMetas[0];
    /**
     * The account initiating the bridge call on Solana.
     * This account's public key is recorded as the `sender` in the cross-chain message.
     */

    from: TAccountMetas[1];
    /** The account that receives payment for the gas costs of bridging the call to Base. */
    gasFeeReceiver: TAccountMetas[2];
    /**
     * The main bridge state account containing global configuration and runtime state.
     * - PDA with `BRIDGE_SEED`
     * - Mutable to charge gas (EIP-1559 accounting) and increment the message nonce
     * - Provides the current nonce for message ordering
     */

    bridge: TAccountMetas[3];
    /** The owner of the call buffer who will receive the rent refund. */
    owner: TAccountMetas[4];
    /**
     * The call buffer account that stores the call parameters and data.
     * Its contents are copied into the outgoing message. The account is then
     * closed by Anchor (via `close = owner`), refunding its rent to `owner`.
     */

    callBuffer: TAccountMetas[5];
    /**
     * The outgoing message account that stores the cross-chain message (header + payload).
     * - Created fresh for each call; the provided keypair determines its address
     * - Funded by `payer`
     * - Space: DISCRIMINATOR_LEN + serialized `OutgoingMessage`
     * Sizing uses `OutgoingMessage::space(Some(call_buffer.data.len()))`, which
     * intentionally allocates for the Transfer variant (worst case) to safely
     * cover the Call variant
     * - Includes `nonce` and `sender` metadata used on Base
     */

    outgoingMessage: TAccountMetas[6];
    /**
     * System program required for creating the outgoing message account.
     * Used internally by Anchor for account initialization.
     */

    systemProgram: TAccountMetas[7];
  };
  data: BridgeCallBufferedInstructionData;
};

export function parseBridgeCallBufferedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBridgeCallBufferedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      from: getNextAccount(),
      gasFeeReceiver: getNextAccount(),
      bridge: getNextAccount(),
      owner: getNextAccount(),
      callBuffer: getNextAccount(),
      outgoingMessage: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBridgeCallBufferedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
