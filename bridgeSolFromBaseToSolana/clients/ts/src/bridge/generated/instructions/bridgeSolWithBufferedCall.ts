/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const BRIDGE_SOL_WITH_BUFFERED_CALL_DISCRIMINATOR = new Uint8Array([
  52, 106, 74, 190, 246, 31, 157, 12,
]);

export function getBridgeSolWithBufferedCallDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BRIDGE_SOL_WITH_BUFFERED_CALL_DISCRIMINATOR
  );
}

export type BridgeSolWithBufferedCallInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountFrom extends string | AccountMeta<string> = string,
  TAccountGasFeeReceiver extends string | AccountMeta<string> = string,
  TAccountSolVault extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountCallBuffer extends string | AccountMeta<string> = string,
  TAccountOutgoingMessage extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountFrom extends string
        ? WritableSignerAccount<TAccountFrom> & AccountSignerMeta<TAccountFrom>
        : TAccountFrom,
      TAccountGasFeeReceiver extends string
        ? WritableAccount<TAccountGasFeeReceiver>
        : TAccountGasFeeReceiver,
      TAccountSolVault extends string
        ? WritableAccount<TAccountSolVault>
        : TAccountSolVault,
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountCallBuffer extends string
        ? WritableAccount<TAccountCallBuffer>
        : TAccountCallBuffer,
      TAccountOutgoingMessage extends string
        ? WritableAccount<TAccountOutgoingMessage>
        : TAccountOutgoingMessage,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BridgeSolWithBufferedCallInstructionData = {
  discriminator: ReadonlyUint8Array;
  outgoingMessageSalt: ReadonlyUint8Array;
  to: ReadonlyUint8Array;
  remoteToken: ReadonlyUint8Array;
  amount: bigint;
};

export type BridgeSolWithBufferedCallInstructionDataArgs = {
  outgoingMessageSalt: ReadonlyUint8Array;
  to: ReadonlyUint8Array;
  remoteToken: ReadonlyUint8Array;
  amount: number | bigint;
};

export function getBridgeSolWithBufferedCallInstructionDataEncoder(): FixedSizeEncoder<BridgeSolWithBufferedCallInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['outgoingMessageSalt', fixEncoderSize(getBytesEncoder(), 32)],
      ['to', fixEncoderSize(getBytesEncoder(), 20)],
      ['remoteToken', fixEncoderSize(getBytesEncoder(), 20)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: BRIDGE_SOL_WITH_BUFFERED_CALL_DISCRIMINATOR,
    })
  );
}

export function getBridgeSolWithBufferedCallInstructionDataDecoder(): FixedSizeDecoder<BridgeSolWithBufferedCallInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['outgoingMessageSalt', fixDecoderSize(getBytesDecoder(), 32)],
    ['to', fixDecoderSize(getBytesDecoder(), 20)],
    ['remoteToken', fixDecoderSize(getBytesDecoder(), 20)],
    ['amount', getU64Decoder()],
  ]);
}

export function getBridgeSolWithBufferedCallInstructionDataCodec(): FixedSizeCodec<
  BridgeSolWithBufferedCallInstructionDataArgs,
  BridgeSolWithBufferedCallInstructionData
> {
  return combineCodec(
    getBridgeSolWithBufferedCallInstructionDataEncoder(),
    getBridgeSolWithBufferedCallInstructionDataDecoder()
  );
}

export type BridgeSolWithBufferedCallInput<
  TAccountPayer extends string = string,
  TAccountFrom extends string = string,
  TAccountGasFeeReceiver extends string = string,
  TAccountSolVault extends string = string,
  TAccountBridge extends string = string,
  TAccountOwner extends string = string,
  TAccountCallBuffer extends string = string,
  TAccountOutgoingMessage extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for account creation and the gas fee (EIP-1559 based) on Solana.
   * Must be mutable to deduct lamports for rent and to transfer the gas fee to `gas_fee_receiver`.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The account that owns the SOL tokens being bridged.
   * Must sign the transaction to authorize the transfer of their SOL.
   */
  from: TransactionSigner<TAccountFrom>;
  /** The account that receives payment for the gas costs of bridging the SOL to Base. */
  gasFeeReceiver: Address<TAccountGasFeeReceiver>;
  /**
   * The SOL vault account that holds locked tokens for the specific remote token.
   * - PDA of this program using `[SOL_VAULT_SEED, remote_token]`
   * - Mutable to receive the locked SOL
   * - Each remote token has its own dedicated vault
   *
   */
  solVault: Address<TAccountSolVault>;
  /**
   * The main bridge state account that tracks nonces and fee parameters.
   * - PDA with `BRIDGE_SEED`
   * - Mutable to charge gas (EIP-1559 accounting) and increment the message nonce
   */
  bridge: Address<TAccountBridge>;
  /** The owner of the call buffer who will receive the rent refund. */
  owner: TransactionSigner<TAccountOwner>;
  /**
   * The call buffer account that stores the call parameters and data.
   * Its contents are copied into the outgoing message, then the account is closed
   * (rent refunded to `owner`).
   */
  callBuffer: Address<TAccountCallBuffer>;
  /**
   * The outgoing message account that stores the cross-chain transfer details.
   * - Created fresh for each bridge; address determined by the provided keypair
   * - Funded by `payer`
   * - Space: DISCRIMINATOR_LEN + serialized `OutgoingMessage`
   */
  outgoingMessage: Address<TAccountOutgoingMessage>;
  /** System program required for account creation and the SOL transfer CPI. */
  systemProgram?: Address<TAccountSystemProgram>;
  outgoingMessageSalt: BridgeSolWithBufferedCallInstructionDataArgs['outgoingMessageSalt'];
  to: BridgeSolWithBufferedCallInstructionDataArgs['to'];
  remoteToken: BridgeSolWithBufferedCallInstructionDataArgs['remoteToken'];
  amount: BridgeSolWithBufferedCallInstructionDataArgs['amount'];
};

export function getBridgeSolWithBufferedCallInstruction<
  TAccountPayer extends string,
  TAccountFrom extends string,
  TAccountGasFeeReceiver extends string,
  TAccountSolVault extends string,
  TAccountBridge extends string,
  TAccountOwner extends string,
  TAccountCallBuffer extends string,
  TAccountOutgoingMessage extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: BridgeSolWithBufferedCallInput<
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountSolVault,
    TAccountBridge,
    TAccountOwner,
    TAccountCallBuffer,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BridgeSolWithBufferedCallInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountFrom,
  TAccountGasFeeReceiver,
  TAccountSolVault,
  TAccountBridge,
  TAccountOwner,
  TAccountCallBuffer,
  TAccountOutgoingMessage,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: true },
    gasFeeReceiver: { value: input.gasFeeReceiver ?? null, isWritable: true },
    solVault: { value: input.solVault ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    callBuffer: { value: input.callBuffer ?? null, isWritable: true },
    outgoingMessage: { value: input.outgoingMessage ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.gasFeeReceiver),
      getAccountMeta(accounts.solVault),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.callBuffer),
      getAccountMeta(accounts.outgoingMessage),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBridgeSolWithBufferedCallInstructionDataEncoder().encode(
      args as BridgeSolWithBufferedCallInstructionDataArgs
    ),
  } as BridgeSolWithBufferedCallInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountSolVault,
    TAccountBridge,
    TAccountOwner,
    TAccountCallBuffer,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBridgeSolWithBufferedCallInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for account creation and the gas fee (EIP-1559 based) on Solana.
     * Must be mutable to deduct lamports for rent and to transfer the gas fee to `gas_fee_receiver`.
     */

    payer: TAccountMetas[0];
    /**
     * The account that owns the SOL tokens being bridged.
     * Must sign the transaction to authorize the transfer of their SOL.
     */

    from: TAccountMetas[1];
    /** The account that receives payment for the gas costs of bridging the SOL to Base. */
    gasFeeReceiver: TAccountMetas[2];
    /**
     * The SOL vault account that holds locked tokens for the specific remote token.
     * - PDA of this program using `[SOL_VAULT_SEED, remote_token]`
     * - Mutable to receive the locked SOL
     * - Each remote token has its own dedicated vault
     *
     */

    solVault: TAccountMetas[3];
    /**
     * The main bridge state account that tracks nonces and fee parameters.
     * - PDA with `BRIDGE_SEED`
     * - Mutable to charge gas (EIP-1559 accounting) and increment the message nonce
     */

    bridge: TAccountMetas[4];
    /** The owner of the call buffer who will receive the rent refund. */
    owner: TAccountMetas[5];
    /**
     * The call buffer account that stores the call parameters and data.
     * Its contents are copied into the outgoing message, then the account is closed
     * (rent refunded to `owner`).
     */

    callBuffer: TAccountMetas[6];
    /**
     * The outgoing message account that stores the cross-chain transfer details.
     * - Created fresh for each bridge; address determined by the provided keypair
     * - Funded by `payer`
     * - Space: DISCRIMINATOR_LEN + serialized `OutgoingMessage`
     */

    outgoingMessage: TAccountMetas[7];
    /** System program required for account creation and the SOL transfer CPI. */
    systemProgram: TAccountMetas[8];
  };
  data: BridgeSolWithBufferedCallInstructionData;
};

export function parseBridgeSolWithBufferedCallInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBridgeSolWithBufferedCallInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      from: getNextAccount(),
      gasFeeReceiver: getNextAccount(),
      solVault: getNextAccount(),
      bridge: getNextAccount(),
      owner: getNextAccount(),
      callBuffer: getNextAccount(),
      outgoingMessage: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBridgeSolWithBufferedCallInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
