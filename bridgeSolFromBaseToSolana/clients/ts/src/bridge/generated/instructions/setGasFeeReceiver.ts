/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_GAS_FEE_RECEIVER_DISCRIMINATOR = new Uint8Array([
  58, 188, 230, 188, 47, 188, 79, 154,
]);

export function getSetGasFeeReceiverDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_GAS_FEE_RECEIVER_DISCRIMINATOR
  );
}

export type SetGasFeeReceiverInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountGuardian extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountGuardian extends string
        ? ReadonlySignerAccount<TAccountGuardian> &
            AccountSignerMeta<TAccountGuardian>
        : TAccountGuardian,
      ...TRemainingAccounts,
    ]
  >;

export type SetGasFeeReceiverInstructionData = {
  discriminator: ReadonlyUint8Array;
  newReceiver: Address;
};

export type SetGasFeeReceiverInstructionDataArgs = { newReceiver: Address };

export function getSetGasFeeReceiverInstructionDataEncoder(): FixedSizeEncoder<SetGasFeeReceiverInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newReceiver', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_GAS_FEE_RECEIVER_DISCRIMINATOR })
  );
}

export function getSetGasFeeReceiverInstructionDataDecoder(): FixedSizeDecoder<SetGasFeeReceiverInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newReceiver', getAddressDecoder()],
  ]);
}

export function getSetGasFeeReceiverInstructionDataCodec(): FixedSizeCodec<
  SetGasFeeReceiverInstructionDataArgs,
  SetGasFeeReceiverInstructionData
> {
  return combineCodec(
    getSetGasFeeReceiverInstructionDataEncoder(),
    getSetGasFeeReceiverInstructionDataDecoder()
  );
}

export type SetGasFeeReceiverInput<
  TAccountBridge extends string = string,
  TAccountGuardian extends string = string,
> = {
  /** The bridge account containing configuration */
  bridge: Address<TAccountBridge>;
  /** The guardian account authorized to update configuration */
  guardian: TransactionSigner<TAccountGuardian>;
  newReceiver: SetGasFeeReceiverInstructionDataArgs['newReceiver'];
};

export function getSetGasFeeReceiverInstruction<
  TAccountBridge extends string,
  TAccountGuardian extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: SetGasFeeReceiverInput<TAccountBridge, TAccountGuardian>,
  config?: { programAddress?: TProgramAddress }
): SetGasFeeReceiverInstruction<
  TProgramAddress,
  TAccountBridge,
  TAccountGuardian
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bridge: { value: input.bridge ?? null, isWritable: true },
    guardian: { value: input.guardian ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.guardian),
    ],
    programAddress,
    data: getSetGasFeeReceiverInstructionDataEncoder().encode(
      args as SetGasFeeReceiverInstructionDataArgs
    ),
  } as SetGasFeeReceiverInstruction<
    TProgramAddress,
    TAccountBridge,
    TAccountGuardian
  >;

  return instruction;
}

export type ParsedSetGasFeeReceiverInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The bridge account containing configuration */
    bridge: TAccountMetas[0];
    /** The guardian account authorized to update configuration */
    guardian: TAccountMetas[1];
  };
  data: SetGasFeeReceiverInstructionData;
};

export function parseSetGasFeeReceiverInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetGasFeeReceiverInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bridge: getNextAccount(),
      guardian: getNextAccount(),
    },
    data: getSetGasFeeReceiverInstructionDataDecoder().decode(instruction.data),
  };
}
