/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BASE_RELAYER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getEip1559ConfigDecoder,
  getEip1559ConfigEncoder,
  getGasConfigDecoder,
  getGasConfigEncoder,
  type Eip1559Config,
  type Eip1559ConfigArgs,
  type GasConfig,
  type GasConfigArgs,
} from '../types';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCfg extends string | AccountMeta<string> = string,
  TAccountGuardian extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCfg extends string ? WritableAccount<TAccountCfg> : TAccountCfg,
      TAccountGuardian extends string
        ? ReadonlySignerAccount<TAccountGuardian> &
            AccountSignerMeta<TAccountGuardian>
        : TAccountGuardian,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  newGuardian: Address;
  eip1559Config: Eip1559Config;
  gasConfig: GasConfig;
};

export type InitializeInstructionDataArgs = {
  newGuardian: Address;
  eip1559Config: Eip1559ConfigArgs;
  gasConfig: GasConfigArgs;
};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newGuardian', getAddressEncoder()],
      ['eip1559Config', getEip1559ConfigEncoder()],
      ['gasConfig', getGasConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newGuardian', getAddressDecoder()],
    ['eip1559Config', getEip1559ConfigDecoder()],
    ['gasConfig', getGasConfigDecoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeInput<
  TAccountPayer extends string = string,
  TAccountCfg extends string = string,
  TAccountGuardian extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for the transaction and bridge account creation.
   * Must be mutable to deduct lamports for account rent.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The relayer config state account that tracks fee parameters.
   * - Uses PDA with CFG_SEED for deterministic address
   * - Mutable to update EIP1559 fee data
   */
  cfg: Address<TAccountCfg>;
  /**
   * The guardian account that will have administrative authority over the bridge.
   * Must be a signer to prove ownership of the guardian key. The payer and guardian
   * may be distinct signers.
   */
  guardian: TransactionSigner<TAccountGuardian>;
  /**
   * System program required for creating new accounts.
   * Used internally by Anchor for account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  newGuardian: InitializeInstructionDataArgs['newGuardian'];
  eip1559Config: InitializeInstructionDataArgs['eip1559Config'];
  gasConfig: InitializeInstructionDataArgs['gasConfig'];
};

export function getInitializeInstruction<
  TAccountPayer extends string,
  TAccountCfg extends string,
  TAccountGuardian extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BASE_RELAYER_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountPayer,
    TAccountCfg,
    TAccountGuardian,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCfg,
  TAccountGuardian,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BASE_RELAYER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    cfg: { value: input.cfg ?? null, isWritable: true },
    guardian: { value: input.guardian ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.cfg),
      getAccountMeta(accounts.guardian),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCfg,
    TAccountGuardian,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for the transaction and bridge account creation.
     * Must be mutable to deduct lamports for account rent.
     */

    payer: TAccountMetas[0];
    /**
     * The relayer config state account that tracks fee parameters.
     * - Uses PDA with CFG_SEED for deterministic address
     * - Mutable to update EIP1559 fee data
     */

    cfg: TAccountMetas[1];
    /**
     * The guardian account that will have administrative authority over the bridge.
     * Must be a signer to prove ownership of the guardian key. The payer and guardian
     * may be distinct signers.
     */

    guardian: TAccountMetas[2];
    /**
     * System program required for creating new accounts.
     * Used internally by Anchor for account initialization.
     */

    systemProgram: TAccountMetas[3];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      cfg: getNextAccount(),
      guardian: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
