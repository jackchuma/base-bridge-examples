/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MESSAGE_TO_RELAY_DISCRIMINATOR = new Uint8Array([
  194, 113, 145, 222, 76, 51, 252, 102,
]);

export function getMessageToRelayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MESSAGE_TO_RELAY_DISCRIMINATOR
  );
}

export type MessageToRelay = {
  discriminator: ReadonlyUint8Array;
  nonce: bigint;
  outgoingMessage: Address;
  gasLimit: bigint;
};

export type MessageToRelayArgs = {
  nonce: number | bigint;
  outgoingMessage: Address;
  gasLimit: number | bigint;
};

export function getMessageToRelayEncoder(): FixedSizeEncoder<MessageToRelayArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU64Encoder()],
      ['outgoingMessage', getAddressEncoder()],
      ['gasLimit', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MESSAGE_TO_RELAY_DISCRIMINATOR })
  );
}

export function getMessageToRelayDecoder(): FixedSizeDecoder<MessageToRelay> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU64Decoder()],
    ['outgoingMessage', getAddressDecoder()],
    ['gasLimit', getU64Decoder()],
  ]);
}

export function getMessageToRelayCodec(): FixedSizeCodec<
  MessageToRelayArgs,
  MessageToRelay
> {
  return combineCodec(getMessageToRelayEncoder(), getMessageToRelayDecoder());
}

export function decodeMessageToRelay<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MessageToRelay, TAddress>;
export function decodeMessageToRelay<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MessageToRelay, TAddress>;
export function decodeMessageToRelay<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MessageToRelay, TAddress> | MaybeAccount<MessageToRelay, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMessageToRelayDecoder()
  );
}

export async function fetchMessageToRelay<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MessageToRelay, TAddress>> {
  const maybeAccount = await fetchMaybeMessageToRelay(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMessageToRelay<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MessageToRelay, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMessageToRelay(maybeAccount);
}

export async function fetchAllMessageToRelay(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MessageToRelay>[]> {
  const maybeAccounts = await fetchAllMaybeMessageToRelay(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMessageToRelay(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MessageToRelay>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeMessageToRelay(maybeAccount)
  );
}

export function getMessageToRelaySize(): number {
  return 56;
}
