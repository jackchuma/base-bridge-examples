/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REGISTER_OUTPUT_ROOT_DISCRIMINATOR = new Uint8Array([
  215, 66, 12, 154, 4, 123, 196, 66,
]);

export function getRegisterOutputRootDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REGISTER_OUTPUT_ROOT_DISCRIMINATOR
  );
}

export type RegisterOutputRootInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountRoot extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountPartnerConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRoot extends string
        ? WritableAccount<TAccountRoot>
        : TAccountRoot,
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountPartnerConfig extends string
        ? ReadonlyAccount<TAccountPartnerConfig>
        : TAccountPartnerConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RegisterOutputRootInstructionData = {
  discriminator: ReadonlyUint8Array;
  outputRoot: ReadonlyUint8Array;
  baseBlockNumber: bigint;
  totalLeafCount: bigint;
  signatures: Array<ReadonlyUint8Array>;
};

export type RegisterOutputRootInstructionDataArgs = {
  outputRoot: ReadonlyUint8Array;
  baseBlockNumber: number | bigint;
  totalLeafCount: number | bigint;
  signatures: Array<ReadonlyUint8Array>;
};

export function getRegisterOutputRootInstructionDataEncoder(): Encoder<RegisterOutputRootInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['outputRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['baseBlockNumber', getU64Encoder()],
      ['totalLeafCount', getU64Encoder()],
      ['signatures', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 65))],
    ]),
    (value) => ({ ...value, discriminator: REGISTER_OUTPUT_ROOT_DISCRIMINATOR })
  );
}

export function getRegisterOutputRootInstructionDataDecoder(): Decoder<RegisterOutputRootInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['outputRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['baseBlockNumber', getU64Decoder()],
    ['totalLeafCount', getU64Decoder()],
    ['signatures', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 65))],
  ]);
}

export function getRegisterOutputRootInstructionDataCodec(): Codec<
  RegisterOutputRootInstructionDataArgs,
  RegisterOutputRootInstructionData
> {
  return combineCodec(
    getRegisterOutputRootInstructionDataEncoder(),
    getRegisterOutputRootInstructionDataDecoder()
  );
}

export type RegisterOutputRootInput<
  TAccountPayer extends string = string,
  TAccountRoot extends string = string,
  TAccountBridge extends string = string,
  TAccountPartnerConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Payer funds the account creation. Authorization is enforced via oracle EVM signature. */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The output root account being created to store the Base MMR root and total leaf count.
   * - Uses PDA with OUTPUT_ROOT_SEED and base_block_number for deterministic address
   * - Payer funds the account creation (authorization is enforced via EVM signatures)
   * - Space allocated for output root state (DISCRIMINATOR_LEN + OutputRoot::INIT_SPACE)
   * - Each output root corresponds to a specific Base block number
   */
  root: Address<TAccountRoot>;
  /**
   * The main bridge state account that tracks the latest registered Base block number.
   * - Uses PDA with BRIDGE_SEED
   * - Must be mutable to update the base_block_number field
   * - Enforces registrations are monotonic and aligned to the configured interval
   */
  bridge: Address<TAccountBridge>;
  /**
   * Partner `Config` account (PDA with seed "config") owned by partner program.
   * Unchecked to avoid Anchor pre-handler owner checks; PDA address is validated in the handler.
   */
  partnerConfig: Address<TAccountPartnerConfig>;
  /**
   * System program required for creating new accounts.
   * Used internally by Anchor for output root account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  outputRoot: RegisterOutputRootInstructionDataArgs['outputRoot'];
  baseBlockNumber: RegisterOutputRootInstructionDataArgs['baseBlockNumber'];
  totalLeafCount: RegisterOutputRootInstructionDataArgs['totalLeafCount'];
  signatures: RegisterOutputRootInstructionDataArgs['signatures'];
};

export function getRegisterOutputRootInstruction<
  TAccountPayer extends string,
  TAccountRoot extends string,
  TAccountBridge extends string,
  TAccountPartnerConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: RegisterOutputRootInput<
    TAccountPayer,
    TAccountRoot,
    TAccountBridge,
    TAccountPartnerConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RegisterOutputRootInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountRoot,
  TAccountBridge,
  TAccountPartnerConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    root: { value: input.root ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: true },
    partnerConfig: { value: input.partnerConfig ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.root),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.partnerConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getRegisterOutputRootInstructionDataEncoder().encode(
      args as RegisterOutputRootInstructionDataArgs
    ),
  } as RegisterOutputRootInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountRoot,
    TAccountBridge,
    TAccountPartnerConfig,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedRegisterOutputRootInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Payer funds the account creation. Authorization is enforced via oracle EVM signature. */
    payer: TAccountMetas[0];
    /**
     * The output root account being created to store the Base MMR root and total leaf count.
     * - Uses PDA with OUTPUT_ROOT_SEED and base_block_number for deterministic address
     * - Payer funds the account creation (authorization is enforced via EVM signatures)
     * - Space allocated for output root state (DISCRIMINATOR_LEN + OutputRoot::INIT_SPACE)
     * - Each output root corresponds to a specific Base block number
     */

    root: TAccountMetas[1];
    /**
     * The main bridge state account that tracks the latest registered Base block number.
     * - Uses PDA with BRIDGE_SEED
     * - Must be mutable to update the base_block_number field
     * - Enforces registrations are monotonic and aligned to the configured interval
     */

    bridge: TAccountMetas[2];
    /**
     * Partner `Config` account (PDA with seed "config") owned by partner program.
     * Unchecked to avoid Anchor pre-handler owner checks; PDA address is validated in the handler.
     */

    partnerConfig: TAccountMetas[3];
    /**
     * System program required for creating new accounts.
     * Used internally by Anchor for output root account initialization.
     */

    systemProgram: TAccountMetas[4];
  };
  data: RegisterOutputRootInstructionData;
};

export function parseRegisterOutputRootInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRegisterOutputRootInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      root: getNextAccount(),
      bridge: getNextAccount(),
      partnerConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRegisterOutputRootInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
