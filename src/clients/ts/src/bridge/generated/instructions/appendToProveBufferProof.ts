/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const APPEND_TO_PROVE_BUFFER_PROOF_DISCRIMINATOR = new Uint8Array([
  234, 13, 59, 98, 112, 207, 250, 184,
]);

export function getAppendToProveBufferProofDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPEND_TO_PROVE_BUFFER_PROOF_DISCRIMINATOR
  );
}

export type AppendToProveBufferProofInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProveBuffer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProveBuffer extends string
        ? WritableAccount<TAccountProveBuffer>
        : TAccountProveBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type AppendToProveBufferProofInstructionData = {
  discriminator: ReadonlyUint8Array;
  proofChunk: Array<ReadonlyUint8Array>;
};

export type AppendToProveBufferProofInstructionDataArgs = {
  proofChunk: Array<ReadonlyUint8Array>;
};

export function getAppendToProveBufferProofInstructionDataEncoder(): Encoder<AppendToProveBufferProofInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proofChunk', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
    ]),
    (value) => ({
      ...value,
      discriminator: APPEND_TO_PROVE_BUFFER_PROOF_DISCRIMINATOR,
    })
  );
}

export function getAppendToProveBufferProofInstructionDataDecoder(): Decoder<AppendToProveBufferProofInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proofChunk', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
  ]);
}

export function getAppendToProveBufferProofInstructionDataCodec(): Codec<
  AppendToProveBufferProofInstructionDataArgs,
  AppendToProveBufferProofInstructionData
> {
  return combineCodec(
    getAppendToProveBufferProofInstructionDataEncoder(),
    getAppendToProveBufferProofInstructionDataDecoder()
  );
}

export type AppendToProveBufferProofInput<
  TAccountOwner extends string = string,
  TAccountProveBuffer extends string = string,
> = {
  /** Owner authorized to modify the buffer */
  owner: TransactionSigner<TAccountOwner>;
  /** Prove buffer account to append proof nodes to */
  proveBuffer: Address<TAccountProveBuffer>;
  proofChunk: AppendToProveBufferProofInstructionDataArgs['proofChunk'];
};

export function getAppendToProveBufferProofInstruction<
  TAccountOwner extends string,
  TAccountProveBuffer extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: AppendToProveBufferProofInput<TAccountOwner, TAccountProveBuffer>,
  config?: { programAddress?: TProgramAddress }
): AppendToProveBufferProofInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountProveBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    proveBuffer: { value: input.proveBuffer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.proveBuffer),
    ],
    programAddress,
    data: getAppendToProveBufferProofInstructionDataEncoder().encode(
      args as AppendToProveBufferProofInstructionDataArgs
    ),
  } as AppendToProveBufferProofInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProveBuffer
  >;

  return instruction;
}

export type ParsedAppendToProveBufferProofInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Owner authorized to modify the buffer */
    owner: TAccountMetas[0];
    /** Prove buffer account to append proof nodes to */
    proveBuffer: TAccountMetas[1];
  };
  data: AppendToProveBufferProofInstructionData;
};

export function parseAppendToProveBufferProofInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAppendToProveBufferProofInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      proveBuffer: getNextAccount(),
    },
    data: getAppendToProveBufferProofInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
