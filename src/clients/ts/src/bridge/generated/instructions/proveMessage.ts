/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PROVE_MESSAGE_DISCRIMINATOR = new Uint8Array([
  172, 66, 78, 136, 158, 187, 47, 115,
]);

export function getProveMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROVE_MESSAGE_DISCRIMINATOR
  );
}

export type ProveMessageInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountOutputRoot extends string | AccountMeta<string> = string,
  TAccountMessage extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountOutputRoot extends string
        ? ReadonlyAccount<TAccountOutputRoot>
        : TAccountOutputRoot,
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountBridge extends string
        ? ReadonlyAccount<TAccountBridge>
        : TAccountBridge,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProveMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  nonce: bigint;
  sender: ReadonlyUint8Array;
  data: ReadonlyUint8Array;
  proof: Array<ReadonlyUint8Array>;
  messageHash: ReadonlyUint8Array;
};

export type ProveMessageInstructionDataArgs = {
  nonce: number | bigint;
  sender: ReadonlyUint8Array;
  data: ReadonlyUint8Array;
  proof: Array<ReadonlyUint8Array>;
  messageHash: ReadonlyUint8Array;
};

export function getProveMessageInstructionDataEncoder(): Encoder<ProveMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU64Encoder()],
      ['sender', fixEncoderSize(getBytesEncoder(), 20)],
      ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['proof', getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['messageHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: PROVE_MESSAGE_DISCRIMINATOR })
  );
}

export function getProveMessageInstructionDataDecoder(): Decoder<ProveMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU64Decoder()],
    ['sender', fixDecoderSize(getBytesDecoder(), 20)],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['proof', getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['messageHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getProveMessageInstructionDataCodec(): Codec<
  ProveMessageInstructionDataArgs,
  ProveMessageInstructionData
> {
  return combineCodec(
    getProveMessageInstructionDataEncoder(),
    getProveMessageInstructionDataDecoder()
  );
}

export type ProveMessageInput<
  TAccountPayer extends string = string,
  TAccountOutputRoot extends string = string,
  TAccountMessage extends string = string,
  TAccountBridge extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for the transaction and incoming message account creation.
   * Must be mutable to deduct lamports for account rent.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The output root account containing the MMR root from Base.
   * Used to verify that the message proof is valid against the committed state.
   * This root must have been previously registered via register_output_root instruction.
   */
  outputRoot: Address<TAccountOutputRoot>;
  /**
   * The incoming message account being created to store the proven message.
   * - Uses PDA with INCOMING_MESSAGE_SEED and message hash for deterministic address
   * - Payer funds the account creation
   * - Space dynamically allocated based on message data length
   * - Once created, this account can be used by relay instructions to execute the message
   */
  message: Address<TAccountMessage>;
  /**
   * The main bridge state account used to check pause status
   * - Uses PDA with BRIDGE_SEED for deterministic address
   */
  bridge: Address<TAccountBridge>;
  /**
   * System program required for creating new accounts.
   * Used internally by Anchor for account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  nonce: ProveMessageInstructionDataArgs['nonce'];
  sender: ProveMessageInstructionDataArgs['sender'];
  data: ProveMessageInstructionDataArgs['data'];
  proof: ProveMessageInstructionDataArgs['proof'];
  messageHash: ProveMessageInstructionDataArgs['messageHash'];
};

export function getProveMessageInstruction<
  TAccountPayer extends string,
  TAccountOutputRoot extends string,
  TAccountMessage extends string,
  TAccountBridge extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: ProveMessageInput<
    TAccountPayer,
    TAccountOutputRoot,
    TAccountMessage,
    TAccountBridge,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProveMessageInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountOutputRoot,
  TAccountMessage,
  TAccountBridge,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    outputRoot: { value: input.outputRoot ?? null, isWritable: false },
    message: { value: input.message ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.outputRoot),
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getProveMessageInstructionDataEncoder().encode(
      args as ProveMessageInstructionDataArgs
    ),
  } as ProveMessageInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountOutputRoot,
    TAccountMessage,
    TAccountBridge,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedProveMessageInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for the transaction and incoming message account creation.
     * Must be mutable to deduct lamports for account rent.
     */

    payer: TAccountMetas[0];
    /**
     * The output root account containing the MMR root from Base.
     * Used to verify that the message proof is valid against the committed state.
     * This root must have been previously registered via register_output_root instruction.
     */

    outputRoot: TAccountMetas[1];
    /**
     * The incoming message account being created to store the proven message.
     * - Uses PDA with INCOMING_MESSAGE_SEED and message hash for deterministic address
     * - Payer funds the account creation
     * - Space dynamically allocated based on message data length
     * - Once created, this account can be used by relay instructions to execute the message
     */

    message: TAccountMetas[2];
    /**
     * The main bridge state account used to check pause status
     * - Uses PDA with BRIDGE_SEED for deterministic address
     */

    bridge: TAccountMetas[3];
    /**
     * System program required for creating new accounts.
     * Used internally by Anchor for account initialization.
     */

    systemProgram: TAccountMetas[4];
  };
  data: ProveMessageInstructionData;
};

export function parseProveMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProveMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      outputRoot: getNextAccount(),
      message: getNextAccount(),
      bridge: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProveMessageInstructionDataDecoder().decode(instruction.data),
  };
}
