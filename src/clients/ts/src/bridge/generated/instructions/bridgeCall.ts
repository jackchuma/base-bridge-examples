/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCallDecoder,
  getCallEncoder,
  type Call,
  type CallArgs,
} from '../types';

export const BRIDGE_CALL_DISCRIMINATOR = new Uint8Array([
  90, 23, 83, 238, 200, 18, 111, 95,
]);

export function getBridgeCallDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BRIDGE_CALL_DISCRIMINATOR);
}

export type BridgeCallInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountFrom extends string | AccountMeta<string> = string,
  TAccountGasFeeReceiver extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountOutgoingMessage extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountFrom extends string
        ? ReadonlySignerAccount<TAccountFrom> & AccountSignerMeta<TAccountFrom>
        : TAccountFrom,
      TAccountGasFeeReceiver extends string
        ? WritableAccount<TAccountGasFeeReceiver>
        : TAccountGasFeeReceiver,
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountOutgoingMessage extends string
        ? WritableAccount<TAccountOutgoingMessage>
        : TAccountOutgoingMessage,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type BridgeCallInstructionData = {
  discriminator: ReadonlyUint8Array;
  outgoingMessageSalt: ReadonlyUint8Array;
  call: Call;
};

export type BridgeCallInstructionDataArgs = {
  outgoingMessageSalt: ReadonlyUint8Array;
  call: CallArgs;
};

export function getBridgeCallInstructionDataEncoder(): Encoder<BridgeCallInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['outgoingMessageSalt', fixEncoderSize(getBytesEncoder(), 32)],
      ['call', getCallEncoder()],
    ]),
    (value) => ({ ...value, discriminator: BRIDGE_CALL_DISCRIMINATOR })
  );
}

export function getBridgeCallInstructionDataDecoder(): Decoder<BridgeCallInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['outgoingMessageSalt', fixDecoderSize(getBytesDecoder(), 32)],
    ['call', getCallDecoder()],
  ]);
}

export function getBridgeCallInstructionDataCodec(): Codec<
  BridgeCallInstructionDataArgs,
  BridgeCallInstructionData
> {
  return combineCodec(
    getBridgeCallInstructionDataEncoder(),
    getBridgeCallInstructionDataDecoder()
  );
}

export type BridgeCallInput<
  TAccountPayer extends string = string,
  TAccountFrom extends string = string,
  TAccountGasFeeReceiver extends string = string,
  TAccountBridge extends string = string,
  TAccountOutgoingMessage extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for the transaction fees and outgoing message account creation.
   * Must be mutable to deduct lamports for account rent and gas fees.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The account initiating the bridge call on Solana.
   * This account's public key will be used as the sender in the cross-chain message.
   */
  from: TransactionSigner<TAccountFrom>;
  /** The account that receives payment for the gas costs of bridging the call to Base. */
  gasFeeReceiver: Address<TAccountGasFeeReceiver>;
  /**
   * The main bridge state account containing global bridge configuration.
   * - Uses PDA with BRIDGE_SEED for deterministic address
   * - Mutable to increment the nonce and update EIP-1559 gas pricing
   * - Provides the current nonce for message ordering
   */
  bridge: Address<TAccountBridge>;
  /**
   * The outgoing message account that stores the cross-chain call data.
   * - Created fresh for each bridge call at a client-provided address (not a PDA)
   * - Payer funds the account creation
   * - Space is DISCRIMINATOR_LEN + OutgoingMessage::space(...)` and is sized using
   * the worst-case message variant to ensure sufficient capacity even for large payloads
   * - Contains all information needed for execution on Base
   */
  outgoingMessage: Address<TAccountOutgoingMessage>;
  /**
   * System program required for creating the outgoing message account.
   * Used internally by Anchor for account initialization.
   */
  systemProgram?: Address<TAccountSystemProgram>;
  outgoingMessageSalt: BridgeCallInstructionDataArgs['outgoingMessageSalt'];
  call: BridgeCallInstructionDataArgs['call'];
};

export function getBridgeCallInstruction<
  TAccountPayer extends string,
  TAccountFrom extends string,
  TAccountGasFeeReceiver extends string,
  TAccountBridge extends string,
  TAccountOutgoingMessage extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: BridgeCallInput<
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountBridge,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): BridgeCallInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountFrom,
  TAccountGasFeeReceiver,
  TAccountBridge,
  TAccountOutgoingMessage,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    from: { value: input.from ?? null, isWritable: false },
    gasFeeReceiver: { value: input.gasFeeReceiver ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: true },
    outgoingMessage: { value: input.outgoingMessage ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.gasFeeReceiver),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.outgoingMessage),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getBridgeCallInstructionDataEncoder().encode(
      args as BridgeCallInstructionDataArgs
    ),
  } as BridgeCallInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountFrom,
    TAccountGasFeeReceiver,
    TAccountBridge,
    TAccountOutgoingMessage,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedBridgeCallInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for the transaction fees and outgoing message account creation.
     * Must be mutable to deduct lamports for account rent and gas fees.
     */

    payer: TAccountMetas[0];
    /**
     * The account initiating the bridge call on Solana.
     * This account's public key will be used as the sender in the cross-chain message.
     */

    from: TAccountMetas[1];
    /** The account that receives payment for the gas costs of bridging the call to Base. */
    gasFeeReceiver: TAccountMetas[2];
    /**
     * The main bridge state account containing global bridge configuration.
     * - Uses PDA with BRIDGE_SEED for deterministic address
     * - Mutable to increment the nonce and update EIP-1559 gas pricing
     * - Provides the current nonce for message ordering
     */

    bridge: TAccountMetas[3];
    /**
     * The outgoing message account that stores the cross-chain call data.
     * - Created fresh for each bridge call at a client-provided address (not a PDA)
     * - Payer funds the account creation
     * - Space is DISCRIMINATOR_LEN + OutgoingMessage::space(...)` and is sized using
     * the worst-case message variant to ensure sufficient capacity even for large payloads
     * - Contains all information needed for execution on Base
     */

    outgoingMessage: TAccountMetas[4];
    /**
     * System program required for creating the outgoing message account.
     * Used internally by Anchor for account initialization.
     */

    systemProgram: TAccountMetas[5];
  };
  data: BridgeCallInstructionData;
};

export function parseBridgeCallInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBridgeCallInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      from: getNextAccount(),
      gasFeeReceiver: getNextAccount(),
      bridge: getNextAccount(),
      outgoingMessage: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getBridgeCallInstructionDataDecoder().decode(instruction.data),
  };
}
