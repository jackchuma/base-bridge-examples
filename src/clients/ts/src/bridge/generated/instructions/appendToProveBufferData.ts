/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const APPEND_TO_PROVE_BUFFER_DATA_DISCRIMINATOR = new Uint8Array([
  4, 153, 157, 132, 144, 253, 235, 44,
]);

export function getAppendToProveBufferDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPEND_TO_PROVE_BUFFER_DATA_DISCRIMINATOR
  );
}

export type AppendToProveBufferDataInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountProveBuffer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountProveBuffer extends string
        ? WritableAccount<TAccountProveBuffer>
        : TAccountProveBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type AppendToProveBufferDataInstructionData = {
  discriminator: ReadonlyUint8Array;
  chunk: ReadonlyUint8Array;
};

export type AppendToProveBufferDataInstructionDataArgs = {
  chunk: ReadonlyUint8Array;
};

export function getAppendToProveBufferDataInstructionDataEncoder(): Encoder<AppendToProveBufferDataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['chunk', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: APPEND_TO_PROVE_BUFFER_DATA_DISCRIMINATOR,
    })
  );
}

export function getAppendToProveBufferDataInstructionDataDecoder(): Decoder<AppendToProveBufferDataInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['chunk', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getAppendToProveBufferDataInstructionDataCodec(): Codec<
  AppendToProveBufferDataInstructionDataArgs,
  AppendToProveBufferDataInstructionData
> {
  return combineCodec(
    getAppendToProveBufferDataInstructionDataEncoder(),
    getAppendToProveBufferDataInstructionDataDecoder()
  );
}

export type AppendToProveBufferDataInput<
  TAccountOwner extends string = string,
  TAccountProveBuffer extends string = string,
> = {
  /** Owner authorized to modify the buffer */
  owner: TransactionSigner<TAccountOwner>;
  /** Prove buffer account to append data to */
  proveBuffer: Address<TAccountProveBuffer>;
  chunk: AppendToProveBufferDataInstructionDataArgs['chunk'];
};

export function getAppendToProveBufferDataInstruction<
  TAccountOwner extends string,
  TAccountProveBuffer extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: AppendToProveBufferDataInput<TAccountOwner, TAccountProveBuffer>,
  config?: { programAddress?: TProgramAddress }
): AppendToProveBufferDataInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountProveBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    proveBuffer: { value: input.proveBuffer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.proveBuffer),
    ],
    programAddress,
    data: getAppendToProveBufferDataInstructionDataEncoder().encode(
      args as AppendToProveBufferDataInstructionDataArgs
    ),
  } as AppendToProveBufferDataInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountProveBuffer
  >;

  return instruction;
}

export type ParsedAppendToProveBufferDataInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Owner authorized to modify the buffer */
    owner: TAccountMetas[0];
    /** Prove buffer account to append data to */
    proveBuffer: TAccountMetas[1];
  };
  data: AppendToProveBufferDataInstructionData;
};

export function parseAppendToProveBufferDataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAppendToProveBufferDataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      proveBuffer: getNextAccount(),
    },
    data: getAppendToProveBufferDataInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
