/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCallTypeDecoder,
  getCallTypeEncoder,
  type CallType,
  type CallTypeArgs,
} from '../types';

export const INITIALIZE_CALL_BUFFER_DISCRIMINATOR = new Uint8Array([
  85, 68, 100, 234, 255, 226, 95, 72,
]);

export function getInitializeCallBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CALL_BUFFER_DISCRIMINATOR
  );
}

export type InitializeCallBufferInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountBridge extends string | AccountMeta<string> = string,
  TAccountCallBuffer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountBridge extends string
        ? ReadonlyAccount<TAccountBridge>
        : TAccountBridge,
      TAccountCallBuffer extends string
        ? WritableSignerAccount<TAccountCallBuffer> &
            AccountSignerMeta<TAccountCallBuffer>
        : TAccountCallBuffer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCallBufferInstructionData = {
  discriminator: ReadonlyUint8Array;
  ty: CallType;
  to: ReadonlyUint8Array;
  value: bigint;
  initialData: ReadonlyUint8Array;
  maxDataLen: bigint;
};

export type InitializeCallBufferInstructionDataArgs = {
  ty: CallTypeArgs;
  to: ReadonlyUint8Array;
  value: number | bigint;
  initialData: ReadonlyUint8Array;
  maxDataLen: number | bigint;
};

export function getInitializeCallBufferInstructionDataEncoder(): Encoder<InitializeCallBufferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['ty', getCallTypeEncoder()],
      ['to', fixEncoderSize(getBytesEncoder(), 20)],
      ['value', getU128Encoder()],
      ['initialData', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['maxDataLen', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CALL_BUFFER_DISCRIMINATOR,
    })
  );
}

export function getInitializeCallBufferInstructionDataDecoder(): Decoder<InitializeCallBufferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['ty', getCallTypeDecoder()],
    ['to', fixDecoderSize(getBytesDecoder(), 20)],
    ['value', getU128Decoder()],
    ['initialData', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['maxDataLen', getU64Decoder()],
  ]);
}

export function getInitializeCallBufferInstructionDataCodec(): Codec<
  InitializeCallBufferInstructionDataArgs,
  InitializeCallBufferInstructionData
> {
  return combineCodec(
    getInitializeCallBufferInstructionDataEncoder(),
    getInitializeCallBufferInstructionDataDecoder()
  );
}

export type InitializeCallBufferInput<
  TAccountPayer extends string = string,
  TAccountBridge extends string = string,
  TAccountCallBuffer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that pays for the transaction and call buffer account creation.
   * This signer becomes the `CallBuffer.owner`.
   */
  payer: TransactionSigner<TAccountPayer>;
  /** The bridge account containing configuration including max buffer size */
  bridge: Address<TAccountBridge>;
  /**
   * The call buffer account being initialized.
   * Space is allocated for up to `max_data_len` bytes of `data` (plus the Vec length prefix).
   * The bridge configuration enforces an upper bound via `buffer_config.max_call_buffer_size`.
   */
  callBuffer: TransactionSigner<TAccountCallBuffer>;
  /** System program required for creating new accounts */
  systemProgram?: Address<TAccountSystemProgram>;
  ty: InitializeCallBufferInstructionDataArgs['ty'];
  to: InitializeCallBufferInstructionDataArgs['to'];
  value: InitializeCallBufferInstructionDataArgs['value'];
  initialData: InitializeCallBufferInstructionDataArgs['initialData'];
  maxDataLen: InitializeCallBufferInstructionDataArgs['maxDataLen'];
};

export function getInitializeCallBufferInstruction<
  TAccountPayer extends string,
  TAccountBridge extends string,
  TAccountCallBuffer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: InitializeCallBufferInput<
    TAccountPayer,
    TAccountBridge,
    TAccountCallBuffer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCallBufferInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountBridge,
  TAccountCallBuffer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: false },
    callBuffer: { value: input.callBuffer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.callBuffer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeCallBufferInstructionDataEncoder().encode(
      args as InitializeCallBufferInstructionDataArgs
    ),
  } as InitializeCallBufferInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountBridge,
    TAccountCallBuffer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeCallBufferInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that pays for the transaction and call buffer account creation.
     * This signer becomes the `CallBuffer.owner`.
     */

    payer: TAccountMetas[0];
    /** The bridge account containing configuration including max buffer size */
    bridge: TAccountMetas[1];
    /**
     * The call buffer account being initialized.
     * Space is allocated for up to `max_data_len` bytes of `data` (plus the Vec length prefix).
     * The bridge configuration enforces an upper bound via `buffer_config.max_call_buffer_size`.
     */

    callBuffer: TAccountMetas[2];
    /** System program required for creating new accounts */
    systemProgram: TAccountMetas[3];
  };
  data: InitializeCallBufferInstructionData;
};

export function parseInitializeCallBufferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeCallBufferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      bridge: getNextAccount(),
      callBuffer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeCallBufferInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
