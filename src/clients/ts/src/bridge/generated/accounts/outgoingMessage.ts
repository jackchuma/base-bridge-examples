/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getBridgeSolanaToBaseStateOutgoingMessageMessageDecoder,
  getBridgeSolanaToBaseStateOutgoingMessageMessageEncoder,
  type BridgeSolanaToBaseStateOutgoingMessageMessage,
  type BridgeSolanaToBaseStateOutgoingMessageMessageArgs,
} from '../types';

export const OUTGOING_MESSAGE_DISCRIMINATOR = new Uint8Array([
  150, 255, 197, 226, 200, 215, 31, 29,
]);

export function getOutgoingMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OUTGOING_MESSAGE_DISCRIMINATOR
  );
}

export type OutgoingMessage = {
  discriminator: ReadonlyUint8Array;
  /**
   * Monotonic message nonce used for ordering and replay protection on Base.
   * Starts at 0 and is incremented by the `Bridge` for each new message.
   */
  nonce: bigint;
  /**
   * The Solana public key of the signer that initiated this cross-chain message.
   * Carried to Base for use by destination logic; Solana-side authentication is enforced
   * via signer constraints.
   */
  sender: Address;
  /**
   * The actual message payload that will be executed on Base.
   * Can be either a direct contract call or a token transfer (with optional call).
   */
  message: BridgeSolanaToBaseStateOutgoingMessageMessage;
};

export type OutgoingMessageArgs = {
  /**
   * Monotonic message nonce used for ordering and replay protection on Base.
   * Starts at 0 and is incremented by the `Bridge` for each new message.
   */
  nonce: number | bigint;
  /**
   * The Solana public key of the signer that initiated this cross-chain message.
   * Carried to Base for use by destination logic; Solana-side authentication is enforced
   * via signer constraints.
   */
  sender: Address;
  /**
   * The actual message payload that will be executed on Base.
   * Can be either a direct contract call or a token transfer (with optional call).
   */
  message: BridgeSolanaToBaseStateOutgoingMessageMessageArgs;
};

export function getOutgoingMessageEncoder(): Encoder<OutgoingMessageArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nonce', getU64Encoder()],
      ['sender', getAddressEncoder()],
      ['message', getBridgeSolanaToBaseStateOutgoingMessageMessageEncoder()],
    ]),
    (value) => ({ ...value, discriminator: OUTGOING_MESSAGE_DISCRIMINATOR })
  );
}

export function getOutgoingMessageDecoder(): Decoder<OutgoingMessage> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nonce', getU64Decoder()],
    ['sender', getAddressDecoder()],
    ['message', getBridgeSolanaToBaseStateOutgoingMessageMessageDecoder()],
  ]);
}

export function getOutgoingMessageCodec(): Codec<
  OutgoingMessageArgs,
  OutgoingMessage
> {
  return combineCodec(getOutgoingMessageEncoder(), getOutgoingMessageDecoder());
}

export function decodeOutgoingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<OutgoingMessage, TAddress>;
export function decodeOutgoingMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<OutgoingMessage, TAddress>;
export function decodeOutgoingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<OutgoingMessage, TAddress>
  | MaybeAccount<OutgoingMessage, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOutgoingMessageDecoder()
  );
}

export async function fetchOutgoingMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<OutgoingMessage, TAddress>> {
  const maybeAccount = await fetchMaybeOutgoingMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOutgoingMessage<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<OutgoingMessage, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOutgoingMessage(maybeAccount);
}

export async function fetchAllOutgoingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<OutgoingMessage>[]> {
  const maybeAccounts = await fetchAllMaybeOutgoingMessage(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOutgoingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<OutgoingMessage>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeOutgoingMessage(maybeAccount)
  );
}
