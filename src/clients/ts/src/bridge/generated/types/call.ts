/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getCallTypeDecoder,
  getCallTypeEncoder,
  type CallType,
  type CallTypeArgs,
} from '.';

/**
 * Represents a contract call to be executed on Base.
 * Contains all the necessary information to perform various types of contract interactions,
 * including regular calls, delegate calls, and contract creation operations.
 */

export type Call = {
  /**
   * The type of call operation to perform (Call, DelegateCall, Create, or Create2).
   * Determines how the call will be executed on the Base side.
   */
  ty: CallType;
  /**
   * The target address on Base (20 bytes for Ethereum-compatible address).
   * Must be set to zero for Create and Create2 operations.
   */
  to: ReadonlyUint8Array;
  /** Amount of ETH to send with this call on Base, in wei. */
  value: bigint;
  /**
   * The encoded function call data or contract bytecode.
   * For regular calls: ABI-encoded function signature and parameters.
   * For contract creation: the contract's initialization bytecode.
   */
  data: ReadonlyUint8Array;
};

export type CallArgs = {
  /**
   * The type of call operation to perform (Call, DelegateCall, Create, or Create2).
   * Determines how the call will be executed on the Base side.
   */
  ty: CallTypeArgs;
  /**
   * The target address on Base (20 bytes for Ethereum-compatible address).
   * Must be set to zero for Create and Create2 operations.
   */
  to: ReadonlyUint8Array;
  /** Amount of ETH to send with this call on Base, in wei. */
  value: number | bigint;
  /**
   * The encoded function call data or contract bytecode.
   * For regular calls: ABI-encoded function signature and parameters.
   * For contract creation: the contract's initialization bytecode.
   */
  data: ReadonlyUint8Array;
};

export function getCallEncoder(): Encoder<CallArgs> {
  return getStructEncoder([
    ['ty', getCallTypeEncoder()],
    ['to', fixEncoderSize(getBytesEncoder(), 20)],
    ['value', getU128Encoder()],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getCallDecoder(): Decoder<Call> {
  return getStructDecoder([
    ['ty', getCallTypeDecoder()],
    ['to', fixDecoderSize(getBytesDecoder(), 20)],
    ['value', getU128Decoder()],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getCallCodec(): Codec<CallArgs, Call> {
  return combineCodec(getCallEncoder(), getCallDecoder());
}
