/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { getCallDecoder, getCallEncoder, type Call, type CallArgs } from '.';

/**
 * Represents a token transfer from Solana to Base with optional contract execution.
 * This struct contains all the information needed to bridge tokens between chains
 * and optionally execute additional logic on the destination chain after the transfer.
 */

export type BridgeSolanaToBaseStateOutgoingMessageTransfer = {
  /** The recipient address on Base that will receive the bridged tokens. */
  to: ReadonlyUint8Array;
  /**
   * The token mint address on Solana that is being bridged.
   * For SOL this is `NATIVE_SOL_PUBKEY`.
   */
  localToken: Address;
  /**
   * The corresponding token contract address on Base.
   * This is the token that will be minted or unlocked on the Base side.
   */
  remoteToken: ReadonlyUint8Array;
  /**
   * The amount to transfer, in the token's smallest unit.
   * For SPL tokens and SOL, funds are locked on Solana; for wrapped tokens, they are burned.
   * On Base, the corresponding amount is minted or unlocked.
   */
  amount: bigint;
  /**
   * Optional contract call to execute on Base after the token transfer completes.
   * Allows for complex cross-chain operations that combine token transfers with logic execution.
   */
  call: Option<Call>;
};

export type BridgeSolanaToBaseStateOutgoingMessageTransferArgs = {
  /** The recipient address on Base that will receive the bridged tokens. */
  to: ReadonlyUint8Array;
  /**
   * The token mint address on Solana that is being bridged.
   * For SOL this is `NATIVE_SOL_PUBKEY`.
   */
  localToken: Address;
  /**
   * The corresponding token contract address on Base.
   * This is the token that will be minted or unlocked on the Base side.
   */
  remoteToken: ReadonlyUint8Array;
  /**
   * The amount to transfer, in the token's smallest unit.
   * For SPL tokens and SOL, funds are locked on Solana; for wrapped tokens, they are burned.
   * On Base, the corresponding amount is minted or unlocked.
   */
  amount: number | bigint;
  /**
   * Optional contract call to execute on Base after the token transfer completes.
   * Allows for complex cross-chain operations that combine token transfers with logic execution.
   */
  call: OptionOrNullable<CallArgs>;
};

export function getBridgeSolanaToBaseStateOutgoingMessageTransferEncoder(): Encoder<BridgeSolanaToBaseStateOutgoingMessageTransferArgs> {
  return getStructEncoder([
    ['to', fixEncoderSize(getBytesEncoder(), 20)],
    ['localToken', getAddressEncoder()],
    ['remoteToken', fixEncoderSize(getBytesEncoder(), 20)],
    ['amount', getU64Encoder()],
    ['call', getOptionEncoder(getCallEncoder())],
  ]);
}

export function getBridgeSolanaToBaseStateOutgoingMessageTransferDecoder(): Decoder<BridgeSolanaToBaseStateOutgoingMessageTransfer> {
  return getStructDecoder([
    ['to', fixDecoderSize(getBytesDecoder(), 20)],
    ['localToken', getAddressDecoder()],
    ['remoteToken', fixDecoderSize(getBytesDecoder(), 20)],
    ['amount', getU64Decoder()],
    ['call', getOptionDecoder(getCallDecoder())],
  ]);
}

export function getBridgeSolanaToBaseStateOutgoingMessageTransferCodec(): Codec<
  BridgeSolanaToBaseStateOutgoingMessageTransferArgs,
  BridgeSolanaToBaseStateOutgoingMessageTransfer
> {
  return combineCodec(
    getBridgeSolanaToBaseStateOutgoingMessageTransferEncoder(),
    getBridgeSolanaToBaseStateOutgoingMessageTransferDecoder()
  );
}
