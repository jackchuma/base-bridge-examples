/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/**
 * Instruction data for finalizing a wrapped token transfer from Base to Solana.
 *
 * This struct represents the final step in a cross-chain bridge operation where tokens
 * that were originally on Base are being bridged to Solana as wrapped tokens. The
 * finalization process mints the appropriate amount of wrapped tokens to the recipient's
 * token account on Solana.
 *
 * The wrapped token mint is derived deterministically from the original token's metadata
 * and decimals, ensuring consistency across bridge operations.
 */

export type FinalizeBridgeWrappedToken = {
  /**
   * The mint address of the wrapped token on Solana.
   * This is a PDA that represents the Solana version
   * of a token that originally exists on Base. The mint address is derived
   * deterministically from the original token's metadata and decimals.
   */
  localToken: Address;
  /**
   * The destination token account that will receive the wrapped tokens.
   * This must be a valid token account that is associated with the wrapped
   * token mint. It is expected to be controlled by the intended recipient of
   * the bridged tokens; recipient ownership is not enforced by this
   * instruction.
   */
  to: Address;
  /**
   * The amount of wrapped tokens to mint to the recipient.
   * The amount is specified in the token's smallest unit.
   */
  amount: bigint;
};

export type FinalizeBridgeWrappedTokenArgs = {
  /**
   * The mint address of the wrapped token on Solana.
   * This is a PDA that represents the Solana version
   * of a token that originally exists on Base. The mint address is derived
   * deterministically from the original token's metadata and decimals.
   */
  localToken: Address;
  /**
   * The destination token account that will receive the wrapped tokens.
   * This must be a valid token account that is associated with the wrapped
   * token mint. It is expected to be controlled by the intended recipient of
   * the bridged tokens; recipient ownership is not enforced by this
   * instruction.
   */
  to: Address;
  /**
   * The amount of wrapped tokens to mint to the recipient.
   * The amount is specified in the token's smallest unit.
   */
  amount: number | bigint;
};

export function getFinalizeBridgeWrappedTokenEncoder(): FixedSizeEncoder<FinalizeBridgeWrappedTokenArgs> {
  return getStructEncoder([
    ['localToken', getAddressEncoder()],
    ['to', getAddressEncoder()],
    ['amount', getU64Encoder()],
  ]);
}

export function getFinalizeBridgeWrappedTokenDecoder(): FixedSizeDecoder<FinalizeBridgeWrappedToken> {
  return getStructDecoder([
    ['localToken', getAddressDecoder()],
    ['to', getAddressDecoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getFinalizeBridgeWrappedTokenCodec(): FixedSizeCodec<
  FinalizeBridgeWrappedTokenArgs,
  FinalizeBridgeWrappedToken
> {
  return combineCodec(
    getFinalizeBridgeWrappedTokenEncoder(),
    getFinalizeBridgeWrappedTokenDecoder()
  );
}
