/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getFinalizeBridgeSolDecoder,
  getFinalizeBridgeSolEncoder,
  getFinalizeBridgeSplDecoder,
  getFinalizeBridgeSplEncoder,
  getFinalizeBridgeWrappedTokenDecoder,
  getFinalizeBridgeWrappedTokenEncoder,
  type FinalizeBridgeSol,
  type FinalizeBridgeSolArgs,
  type FinalizeBridgeSpl,
  type FinalizeBridgeSplArgs,
  type FinalizeBridgeWrappedToken,
  type FinalizeBridgeWrappedTokenArgs,
} from '.';

/**
 * Specifies the type of token being finalized on Solana for a Baseâ†’Solana bridge
 * and contains the necessary data to complete the transfer on the Solana side.
 *
 * Each variant corresponds to a different token type that can be bridged,
 * with variant-specific data needed to complete the transfer operation.
 */

export type BridgeBaseToSolanaStateIncomingMessageTransfer =
  | { __kind: 'Sol'; fields: readonly [FinalizeBridgeSol] }
  | { __kind: 'Spl'; fields: readonly [FinalizeBridgeSpl] }
  | { __kind: 'WrappedToken'; fields: readonly [FinalizeBridgeWrappedToken] };

export type BridgeBaseToSolanaStateIncomingMessageTransferArgs =
  | { __kind: 'Sol'; fields: readonly [FinalizeBridgeSolArgs] }
  | { __kind: 'Spl'; fields: readonly [FinalizeBridgeSplArgs] }
  | {
      __kind: 'WrappedToken';
      fields: readonly [FinalizeBridgeWrappedTokenArgs];
    };

export function getBridgeBaseToSolanaStateIncomingMessageTransferEncoder(): Encoder<BridgeBaseToSolanaStateIncomingMessageTransferArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Sol',
      getStructEncoder([
        ['fields', getTupleEncoder([getFinalizeBridgeSolEncoder()])],
      ]),
    ],
    [
      'Spl',
      getStructEncoder([
        ['fields', getTupleEncoder([getFinalizeBridgeSplEncoder()])],
      ]),
    ],
    [
      'WrappedToken',
      getStructEncoder([
        ['fields', getTupleEncoder([getFinalizeBridgeWrappedTokenEncoder()])],
      ]),
    ],
  ]);
}

export function getBridgeBaseToSolanaStateIncomingMessageTransferDecoder(): Decoder<BridgeBaseToSolanaStateIncomingMessageTransfer> {
  return getDiscriminatedUnionDecoder([
    [
      'Sol',
      getStructDecoder([
        ['fields', getTupleDecoder([getFinalizeBridgeSolDecoder()])],
      ]),
    ],
    [
      'Spl',
      getStructDecoder([
        ['fields', getTupleDecoder([getFinalizeBridgeSplDecoder()])],
      ]),
    ],
    [
      'WrappedToken',
      getStructDecoder([
        ['fields', getTupleDecoder([getFinalizeBridgeWrappedTokenDecoder()])],
      ]),
    ],
  ]);
}

export function getBridgeBaseToSolanaStateIncomingMessageTransferCodec(): Codec<
  BridgeBaseToSolanaStateIncomingMessageTransferArgs,
  BridgeBaseToSolanaStateIncomingMessageTransfer
> {
  return combineCodec(
    getBridgeBaseToSolanaStateIncomingMessageTransferEncoder(),
    getBridgeBaseToSolanaStateIncomingMessageTransferDecoder()
  );
}

// Data Enum Helpers.
export function bridgeBaseToSolanaStateIncomingMessageTransfer(
  kind: 'Sol',
  data: GetDiscriminatedUnionVariantContent<
    BridgeBaseToSolanaStateIncomingMessageTransferArgs,
    '__kind',
    'Sol'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeBaseToSolanaStateIncomingMessageTransferArgs,
  '__kind',
  'Sol'
>;
export function bridgeBaseToSolanaStateIncomingMessageTransfer(
  kind: 'Spl',
  data: GetDiscriminatedUnionVariantContent<
    BridgeBaseToSolanaStateIncomingMessageTransferArgs,
    '__kind',
    'Spl'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeBaseToSolanaStateIncomingMessageTransferArgs,
  '__kind',
  'Spl'
>;
export function bridgeBaseToSolanaStateIncomingMessageTransfer(
  kind: 'WrappedToken',
  data: GetDiscriminatedUnionVariantContent<
    BridgeBaseToSolanaStateIncomingMessageTransferArgs,
    '__kind',
    'WrappedToken'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeBaseToSolanaStateIncomingMessageTransferArgs,
  '__kind',
  'WrappedToken'
>;
export function bridgeBaseToSolanaStateIncomingMessageTransfer<
  K extends BridgeBaseToSolanaStateIncomingMessageTransferArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBridgeBaseToSolanaStateIncomingMessageTransfer<
  K extends BridgeBaseToSolanaStateIncomingMessageTransfer['__kind'],
>(
  kind: K,
  value: BridgeBaseToSolanaStateIncomingMessageTransfer
): value is BridgeBaseToSolanaStateIncomingMessageTransfer & { __kind: K } {
  return value.__kind === kind;
}
