/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/kit';
import {
  getBridgeBaseToSolanaStateIncomingMessageTransferDecoder,
  getBridgeBaseToSolanaStateIncomingMessageTransferEncoder,
  getIxDecoder,
  getIxEncoder,
  type BridgeBaseToSolanaStateIncomingMessageTransfer,
  type BridgeBaseToSolanaStateIncomingMessageTransferArgs,
  type Ix,
  type IxArgs,
} from '.';

/**
 * Defines the type of cross-chain operation being performed from Base to Solana.
 *
 * This enum encapsulates the two main categories of bridge operations:
 * general instruction calls and token transfers with optional additional instructions.
 */

export type BridgeBaseToSolanaStateIncomingMessageMessage =
  | { __kind: 'Call'; fields: readonly [Array<Ix>] }
  | {
      __kind: 'Transfer';
      /** The specific type of token transfer (SOL, SPL token, or wrapped token) */
      transfer: BridgeBaseToSolanaStateIncomingMessageTransfer;
      /** Additional Solana instructions to execute after the transfer is finalized */
      ixs: Array<Ix>;
    };

export type BridgeBaseToSolanaStateIncomingMessageMessageArgs =
  | { __kind: 'Call'; fields: readonly [Array<IxArgs>] }
  | {
      __kind: 'Transfer';
      /** The specific type of token transfer (SOL, SPL token, or wrapped token) */
      transfer: BridgeBaseToSolanaStateIncomingMessageTransferArgs;
      /** Additional Solana instructions to execute after the transfer is finalized */
      ixs: Array<IxArgs>;
    };

export function getBridgeBaseToSolanaStateIncomingMessageMessageEncoder(): Encoder<BridgeBaseToSolanaStateIncomingMessageMessageArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Call',
      getStructEncoder([
        ['fields', getTupleEncoder([getArrayEncoder(getIxEncoder())])],
      ]),
    ],
    [
      'Transfer',
      getStructEncoder([
        [
          'transfer',
          getBridgeBaseToSolanaStateIncomingMessageTransferEncoder(),
        ],
        ['ixs', getArrayEncoder(getIxEncoder())],
      ]),
    ],
  ]);
}

export function getBridgeBaseToSolanaStateIncomingMessageMessageDecoder(): Decoder<BridgeBaseToSolanaStateIncomingMessageMessage> {
  return getDiscriminatedUnionDecoder([
    [
      'Call',
      getStructDecoder([
        ['fields', getTupleDecoder([getArrayDecoder(getIxDecoder())])],
      ]),
    ],
    [
      'Transfer',
      getStructDecoder([
        [
          'transfer',
          getBridgeBaseToSolanaStateIncomingMessageTransferDecoder(),
        ],
        ['ixs', getArrayDecoder(getIxDecoder())],
      ]),
    ],
  ]);
}

export function getBridgeBaseToSolanaStateIncomingMessageMessageCodec(): Codec<
  BridgeBaseToSolanaStateIncomingMessageMessageArgs,
  BridgeBaseToSolanaStateIncomingMessageMessage
> {
  return combineCodec(
    getBridgeBaseToSolanaStateIncomingMessageMessageEncoder(),
    getBridgeBaseToSolanaStateIncomingMessageMessageDecoder()
  );
}

// Data Enum Helpers.
export function bridgeBaseToSolanaStateIncomingMessageMessage(
  kind: 'Call',
  data: GetDiscriminatedUnionVariantContent<
    BridgeBaseToSolanaStateIncomingMessageMessageArgs,
    '__kind',
    'Call'
  >['fields']
): GetDiscriminatedUnionVariant<
  BridgeBaseToSolanaStateIncomingMessageMessageArgs,
  '__kind',
  'Call'
>;
export function bridgeBaseToSolanaStateIncomingMessageMessage(
  kind: 'Transfer',
  data: GetDiscriminatedUnionVariantContent<
    BridgeBaseToSolanaStateIncomingMessageMessageArgs,
    '__kind',
    'Transfer'
  >
): GetDiscriminatedUnionVariant<
  BridgeBaseToSolanaStateIncomingMessageMessageArgs,
  '__kind',
  'Transfer'
>;
export function bridgeBaseToSolanaStateIncomingMessageMessage<
  K extends BridgeBaseToSolanaStateIncomingMessageMessageArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBridgeBaseToSolanaStateIncomingMessageMessage<
  K extends BridgeBaseToSolanaStateIncomingMessageMessage['__kind'],
>(
  kind: K,
  value: BridgeBaseToSolanaStateIncomingMessageMessage
): value is BridgeBaseToSolanaStateIncomingMessageMessage & { __kind: K } {
  return value.__kind === kind;
}
