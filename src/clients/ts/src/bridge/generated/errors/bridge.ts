/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';

/** IncorrectGasFeeReceiver: Incorrect gas fee receiver */
export const BRIDGE_ERROR__INCORRECT_GAS_FEE_RECEIVER = 0x1770; // 6000
/** BridgePaused: Bridge is paused */
export const BRIDGE_ERROR__BRIDGE_PAUSED = 0x1771; // 6001

export type BridgeError =
  | typeof BRIDGE_ERROR__BRIDGE_PAUSED
  | typeof BRIDGE_ERROR__INCORRECT_GAS_FEE_RECEIVER;

let bridgeErrorMessages: Record<BridgeError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  bridgeErrorMessages = {
    [BRIDGE_ERROR__BRIDGE_PAUSED]: `Bridge is paused`,
    [BRIDGE_ERROR__INCORRECT_GAS_FEE_RECEIVER]: `Incorrect gas fee receiver`,
  };
}

export function getBridgeErrorMessage(code: BridgeError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (bridgeErrorMessages as Record<BridgeError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isBridgeError<TProgramErrorCode extends BridgeError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BRIDGE_PROGRAM_ADDRESS,
    code
  );
}
